//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";



package Sintactico;



//#line 2 "grammar.y"
import java.util.Collections;
import java.util.Scanner;
import java.io.IOException;
import java.util.ArrayList;
import java.io.File;

import Lexico.AnalizadorLexico;

import GCodigo.Tercetos;
import GCodigo.Scope;

import GAssembler.GeneradorAssembler;

import Tools.Logger;
import Tools.Tupla;
import Tools.TablaSimbolos;
import Tools.TablaTipos;
import Tools.TablaClases;
//#line 36 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short CLASS=257;
public final static short INTERFACE=258;
public final static short IMPLEMENT=259;
public final static short RETURN=260;
public final static short IF=261;
public final static short ELSE=262;
public final static short END_IF=263;
public final static short FOR=264;
public final static short IN=265;
public final static short RANGE=266;
public final static short IMPL=267;
public final static short PRINT=268;
public final static short TOD=269;
public final static short EQUAL_OPERATOR=270;
public final static short NOT_EQUAL_OPERATOR=271;
public final static short GREATER_THAN_OR_EQUAL_OPERATOR=272;
public final static short LESS_THAN_OR_EQUAL_OPERATOR=273;
public final static short MINUS_ASSIGN=274;
public final static short VOID=275;
public final static short LONG=276;
public final static short UINT=277;
public final static short DOUBLE=278;
public final static short CADENA=279;
public final static short ID=280;
public final static short CTE_DOUBLE=281;
public final static short CTE_UINT=282;
public final static short CTE_LONG=283;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    1,    1,    2,    2,    2,
    2,    3,    3,    7,    8,    8,    8,    8,   10,   10,
   11,   12,   12,   12,   13,   13,   17,   17,   18,   18,
   18,   18,   18,   18,   18,   19,   20,   14,   14,   22,
   22,   24,   25,   25,   25,   25,   26,   23,   23,   27,
   29,   15,   15,   15,    9,   31,   31,   31,    4,   33,
   34,   34,   34,   34,   35,   35,   36,   36,   36,   37,
   37,   38,   38,   40,   39,   39,   39,    5,    5,    5,
    5,   42,   42,   42,   42,   44,   44,   45,   45,   45,
   46,   46,   47,   47,   47,   47,   49,   48,   50,   50,
   50,   50,   50,   50,   50,   51,   51,   51,   55,   56,
   56,   57,   57,   57,   58,   58,   58,   58,   58,   21,
   59,   59,   59,   60,   60,   60,   60,   61,   61,   61,
   61,   61,   61,   62,   62,   62,   62,   62,   62,   54,
   54,   54,   54,   54,   54,   53,   53,   53,   53,   53,
   53,   53,   53,   16,   16,   65,   66,   66,   67,   67,
   68,   32,   30,   41,   63,   64,   52,   28,   28,   28,
   28,   28,   28,   28,   28,   28,   28,   70,   70,   70,
   70,   70,   72,   70,   69,   69,   71,   71,    6,    6,
   73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
   74,   75,   75,   75,   75,   75,   75,   81,   81,   81,
   80,   80,   83,   83,   43,   76,   76,   76,   76,   76,
   76,   84,   84,   84,   84,   85,   85,   77,   77,   77,
   77,   77,   77,   87,   87,   88,   88,   86,   78,   89,
   89,   90,   90,   90,   91,   91,   92,   94,   93,   82,
   95,   95,   79,   79,   79,   79,   79,   79,   79,   79,
};
final static short yylen[] = {                            2,
    3,    2,    0,    2,    1,    1,    2,    1,    1,    1,
    1,    3,    4,    1,    3,    2,    3,    2,    1,    2,
    1,    1,    1,    1,    3,    2,    1,    3,    1,    3,
    4,    3,    3,    3,    3,    1,    1,    3,    2,    2,
    2,    1,    4,    3,    5,    4,    1,    1,    1,    2,
    1,    2,    4,    4,    2,    1,    3,    3,    3,    1,
    3,    3,    2,    2,    1,    2,    1,    1,    1,    2,
    3,    1,    1,    3,    3,    2,    3,    5,    5,    6,
    4,    3,    2,    3,    2,    1,    2,    2,    2,    2,
    2,    2,    4,    3,    5,    4,    2,    1,    3,    3,
    3,    3,    3,    3,    3,    1,    1,    1,    3,    1,
    1,    1,    3,    3,    1,    3,    3,    3,    3,    1,
    1,    3,    3,    1,    3,    3,    3,    1,    1,    1,
    1,    3,    2,    4,    4,    4,    3,    3,    1,    1,
    1,    1,    2,    2,    2,    4,    3,    4,    3,    4,
    4,    5,    5,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    5,    6,    4,
    3,    5,    3,    5,    4,    2,    2,    3,    2,    5,
    6,    4,    0,    6,    1,    2,    1,    2,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    2,    2,    1,    1,    1,    5,    5,    4,    4,    6,
    5,    3,    3,    3,    2,    1,    1,    5,    4,    5,
    4,    6,    5,    1,    1,    1,    1,    3,    6,    1,
    2,    7,    7,    4,    1,    1,    1,    1,    1,    2,
    1,    1,    3,    3,    3,    3,    3,    3,    2,    2,
};
final static short yydefred[] = {                         0,
    5,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   42,  160,  159,  161,    0,  140,  141,  142,    0,    0,
    2,    0,  215,    0,    6,    8,    9,   10,   11,    0,
    0,    0,  208,  155,  209,  213,    0,  106,    0,  108,
    0,    0,    0,    0,  154,  156,  157,  158,  189,  190,
  203,  204,  205,  207,  210,  202,  206,    0,    4,   14,
    0,   60,    0,    0,    0,    0,    0,  110,  240,  111,
    0,    0,    0,    0,  259,  260,    0,    0,    0,  143,
  145,  144,    0,  176,  185,    0,    0,  177,    0,    1,
    7,    0,    0,   27,    0,   41,    0,  252,  251,  250,
   47,   40,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  211,  212,    0,    0,    0,   12,
    0,    0,    0,   59,    0,    0,  129,  130,  128,    0,
    0,    0,    0,  124,  131,    0,  225,    0,    0,  197,
  198,  199,    0,  196,    0,    0,  200,  191,  192,  193,
  194,  195,    0,    0,    0,  241,    0,    0,  164,    0,
  254,  253,  255,  258,  256,  257,  171,    0,    0,  173,
  186,    0,    0,  201,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  101,    0,  102,  103,  105,  104,  100,
   99,  109,    0,  147,   51,    0,    0,  149,    0,  162,
    0,   56,  163,   16,    0,   19,   21,   22,   23,   24,
    0,    0,    0,   18,    0,   13,   63,   69,    0,    0,
    0,   65,   67,   68,   72,   73,   64,    0,    0,    0,
  133,    0,    0,    0,  224,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  223,  222,    0,  179,    0,  187,
   36,    0,    0,  218,  219,    0,    0,  229,  231,    0,
    0,    0,    0,    0,    0,   81,  170,    0,    0,  175,
    0,   28,    0,   32,   37,   33,   35,   34,   30,    0,
   44,    0,    0,  151,    0,  146,  150,    0,  148,    0,
    0,   15,   20,    0,   49,    0,   48,    0,    0,   17,
    0,    0,   61,   66,   62,    0,  137,    0,  138,    0,
  132,    0,    0,    0,    0,    0,    0,    0,    0,  125,
  126,  127,    0,    0,  178,  188,  221,    0,  216,  217,
  233,    0,  228,  230,  237,  236,  238,    0,    0,    0,
    0,   83,    0,    0,    0,   86,    0,   85,    0,   78,
   79,  172,  168,    0,  174,   31,   46,   50,    0,   43,
  152,  153,   58,   57,   25,   38,    0,    0,   71,   75,
   77,   74,  136,  135,  134,  182,    0,    0,  220,  232,
  247,    0,    0,  245,  246,  239,   80,   98,   92,    0,
   91,   82,   87,   89,   90,   88,   84,  169,   45,   54,
   53,  183,  180,    0,    0,    0,    0,    0,    0,  184,
  181,  244,  249,    0,    0,    0,   94,    0,    0,    0,
    0,    0,   96,    0,    0,   93,  248,    0,    0,   95,
  243,  242,
};
final static short yydgoto[] = {                          4,
   24,   25,  140,  141,  142,   85,   61,  120,  121,  205,
  206,  207,  208,  209,  210,   30,   93,   94,   95,  274,
  275,   31,  296,   32,   96,   97,  283,   33,  196,   34,
  201,  202,   63,  124,  221,  222,  223,  224,  225,  226,
  160,  266,   35,  345,  346,  347,  389,  390,  420,   36,
   37,  127,  128,  129,   41,   42,  130,  131,  185,  133,
  134,  135,   43,   44,   45,   46,   47,   48,   86,  145,
  249,  410,  250,   49,   50,   51,   52,   53,   54,   55,
   56,   57,   58,   66,  153,  154,  155,  337,   71,  340,
  386,  382,  414,  428,  100,
};
final static short yysindex[] = {                       -25,
    0,  289,  108,    0, -208, -160,   22, -210, -133,   16,
    0,    0,    0,    0,    0,    0,    0,    0,  134,  413,
    0,  540,    0,  346,    0,    0,    0,    0,    0, -102,
   36,  -96,    0,    0,    0,    0,  395,    0,    0,    0,
    0,  146,   38,   46,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  132,    0,    0,
  -33,    0,   83,  306,  180,  994,  -63,    0,    0,    0,
  -60, -142,  -14,    0,    0,    0,  164,  178,  238,    0,
    0,    0,    4,    0,    0,  575,  202,    0,  599,    0,
    0,    0,  154,    0,  -55,    0,   87,    0,    0,    0,
    0,    0,  306,  306,  306,  306,  306,  306,  306,  -26,
   30,  630,   68,  766,    0,    0,   14,  654,  162,    0,
   88,  705,  358,    0,  100,  784,    0,    0,    0, -108,
   17,   56,   26,    0,    0,  237,    0,   41,  848,    0,
    0,    0,   37,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    6,  116,   65,    0,   69,  264,    0,   -5,
    0,    0,    0,    0,    0,    0,    0,  639,  297,    0,
    0,  303,  314,    0,   37,  337,  306,  306,  306,  306,
  306,  155,  -27,    0,   56,    0,    0,    0,    0,    0,
    0,    0,  281,    0,    0,  -32,  293,    0,  -28,    0,
  248,    0,    0,    0,  988,    0,    0,    0,    0,    0,
 -102,   60,  309,    0,  494,    0,    0,    0,   37,  -96,
 1032,    0,    0,    0,    0,    0,    0,  843, -101,  448,
    0,  381,  306,  306,    0,  306,  306,  306,  306,  306,
  306,  306,  306,  306,    0,    0,  380,    0,  967,    0,
    0,  316,  -12,    0,    0,  329,    8,    0,    0,  994,
  114,  133, 1104,  865,   72,    0,    0,  680,  723,    0,
  393,    0,  306,    0,    0,    0,    0,    0,    0,  339,
    0,   37,   -1,    0,  431,    0,    0,  434,    0,   14,
   14,    0,    0,  326,    0,  446,    0,  235,  236,    0,
  344,   66,    0,    0,    0,  378,    0,  464,    0,  465,
    0,   17,   17,   56,   56,   56,   56,   26,   26,    0,
    0,    0,  793,  475,    0,    0,    0,  383,    0,    0,
    0,  396,    0,    0,    0,    0,    0,  -42,  -42,  994,
  476,    0,  247,  247, 1113,    0,   67,    0,  898,    0,
    0,    0,    0,  746,    0,    0,    0,    0,  490,    0,
    0,    0,    0,    0,    0,    0,  474,  493,    0,    0,
    0,    0,    0,    0,    0,    0, 1037, 1066,    0,    0,
    0,  278,  411,    0,    0,    0,    0,    0,    0,  193,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1093,  414,  -42,  -42,  286,   -3,    0,
    0,    0,    0,  500,  486,  424,    0,  271,  296,  513,
  -42,  -42,    0,    0,  514,    0,    0,  517,  519,    0,
    0,    0,
};
final static short yyrindex[] = {                       563,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  522,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1195,    0,
  436,  384,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  470,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  824,    0,    0,   89,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  481,    0,    0,    0,    0,    0,
  -10,  771,  883,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  121,  138,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  892,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  269,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  294,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   25,    0,  224,    0,  507,    0,    0,
  611,  813,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   61,  195,  863, 1153, 1157, 1161,  909,  934,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,
    0,    0,
};
final static short yygindex[] = {                         0,
    0,  549,   79,  111,  150,    2,    0,  455,    0,  458,
  -71,    0,    0,    0,  -89,  -64,   -7,  403, -272,  -85,
 1332,  -62,    0, 1137,  -13,    0,  170,  -19,  468, 1078,
    0, -123,    0,    0,  467,  -49,    0,    0,    0,    0,
    0, -191,  -30,  327, -168,    0,  250,    0,    0,    0,
    0,    3,   19,   -2,  584,  586,  532,  251, 1172,  246,
  208,    0,    0,    0,    0,    0,    0,    0,  -21, -223,
 -295,    0,  -22,  -17,    0,  -15,   31,   55,   70,   90,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  259,  192,  179,    0,
};
final static int YYTABLESIZE=1562;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         40,
   89,  143,   19,   29,   38,  181,  119,   78,  286,  358,
   69,   99,  289,  281,    3,   76,  235,   40,  102,   40,
   39,   40,   38,  307,   38,   29,   38,  377,   77,  162,
  112,  329,  218,  218,  264,  144,  335,  417,   39,  360,
   39,   97,   39,  146,  163,   67,  330,  168,  147,  254,
  148,  333,  265,  211,  211,  212,  212,  219,  219,   75,
   19,   65,  244,   40,  255,   26,  334,  242,   38,   68,
  341,   60,  243,  350,  143,   22,  238,  112,  239,   98,
   26,  246,  404,   40,   39,  114,   40,  171,   38,  118,
  171,   38,  276,  277,  278,  279,  149,    2,  240,   22,
  241,  113,   26,  295,   39,   22,   22,   39,  144,  370,
  394,  264,   27,  158,  112,   23,  384,  263,  282,   62,
  150,  147,  123,  148,  371,  395,  183,  119,  167,   29,
   72,  218,   29,  293,   27,  151,   40,  159,  218,  230,
  211,   38,  212,  293,   64,  358,  268,   29,   59,   26,
  211,   28,  212,  339,  306,  152,  219,   39,   20,  258,
  111,  233,  234,  219,  227,   40,  363,  364,  113,  149,
   38,  304,  264,   28,  259,  115,  393,   92,  304,  227,
  393,  226,   20,  101,  143,  113,   39,  356,   20,   20,
  116,  110,  297,  150,  263,  143,  226,  174,  343,  343,
  176,  156,  214,  294,  157,  122,  302,  164,  151,  182,
  118,  301,  175,   29,  177,  178,  179,  180,  144,  126,
  137,  165,  229,  285,   19,  117,  326,  288,  152,  144,
    1,  147,  409,  148,  351,  114,  338,  336,   16,   17,
   18,  161,  147,  328,  148,  172,   40,  354,   12,   13,
   14,   38,  203,  192,  359,  263,   36,   40,  143,  112,
  112,  252,   38,  332,   39,   40,   40,   39,  253,  171,
   38,   38,   12,   13,   14,  143,  203,  245,   39,  149,
  343,  166,  372,  110,  343,  193,   39,   39,  236,  237,
  149,  290,  144,  200,   73,   74,   16,   17,   18,   26,
   26,   26,   26,  150,   26,  147,  291,  148,   55,  144,
  233,  234,  143,  143,  150,  408,  251,  385,  151,  114,
   40,  262,  147,  197,  148,   38,  260,  396,   22,  151,
  113,  113,   23,   19,  261,  381,  381,   40,  152,  143,
  269,   39,   38,  270,  418,  126,  144,  144,   39,  152,
   19,   40,  298,  149,  326,  171,   38,  271,   39,  147,
  147,  148,  148,   29,   29,   29,   29,  299,   29,  365,
  149,  256,   39,  144,   40,   40,  227,  150,  257,   38,
   38,  326,  235,  227,  175,   22,  147,  369,  148,   23,
   19,   55,  151,  226,  150,   39,   39,  273,  227,  234,
  226,   40,  175,  413,  413,  284,   38,  149,  149,  151,
  280,   20,  152,   21,   80,   81,   82,  287,  427,  427,
  167,  311,   39,  323,  167,  167,  167,  167,  167,  152,
  167,  150,  150,  355,  149,  136,   11,   12,   13,   14,
  327,  203,  167,  167,  167,  167,  151,  151,  125,  320,
  321,  322,   22,  331,  406,  109,   23,   19,  150,   74,
   16,   17,   18,  357,  114,  114,  152,  152,   20,  407,
   90,  361,  111,  151,  362,  166,  111,  111,  111,  111,
  111,  111,  111,  312,  313,  318,  319,  126,  309,  366,
  367,  368,   19,  152,  111,  111,  111,  111,   39,   39,
   39,   39,  373,   39,  374,  375,  110,  379,  167,  165,
  110,  110,  110,  110,  110,  110,  110,  139,  378,  387,
  380,  139,  139,  139,  139,  139,  388,  139,  110,  110,
  399,  110,  400,  405,  300,   20,  401,   84,  412,  139,
  139,  416,  139,  421,  422,    5,    6,   52,  423,    7,
  424,  425,    8,  426,  430,    9,   10,  431,  166,  432,
  111,  165,    3,   11,   12,   13,   14,  110,   15,   16,
   17,   18,   91,  155,  125,  216,  215,  272,  419,   22,
   88,  199,  110,   23,   19,   74,   16,   17,   18,  228,
  349,   70,  165,  391,  110,   79,  138,  383,  415,    0,
  429,    0,    5,    6,    0,  139,    7,    0,    0,    8,
    0,    0,    9,   10,   22,    0,    0,    0,   23,   19,
   11,   12,   13,   14,    0,   15,   16,   17,   18,    0,
    0,   52,   11,   12,   13,   14,    0,  203,   22,  167,
    0,    0,   23,   19,  165,    0,    0,    0,  167,    0,
  103,   70,    0,  167,  167,  167,  167,  167,  167,  167,
  167,  167,   20,  167,  104,  105,  106,  107,  108,  126,
  194,    0,   83,    7,   19,    0,    8,    0,   22,    0,
   10,    0,   23,   19,    0,    0,    0,   11,   12,   13,
   14,  111,   15,   16,   17,   18,    0,   20,    0,  170,
    0,    0,    0,  308,    0,  111,  111,  111,  111,  111,
  111,  111,  111,  111,    0,  111,  125,    0,    0,   22,
    0,   20,    0,   23,   19,  110,    0,   74,   16,   17,
   18,    0,    0,    0,    0,   70,  139,    0,    0,  110,
  110,  110,  110,    0,  110,  110,  110,  110,    0,  110,
  139,  139,  139,  139,    0,  139,  139,  139,  139,    0,
  139,   20,   22,  267,    0,    0,   23,   19,   11,   12,
   13,   14,    0,  203,    0,    0,    0,  110,  204,    0,
    0,   52,   52,   52,   52,   22,   52,    0,    0,   23,
   19,  110,  110,  110,  110,  110,    0,    0,    0,   87,
    7,  163,   20,    8,  352,  126,  198,   10,    0,    0,
   19,  115,    0,    0,   11,   12,   13,   14,    0,   15,
   16,   17,   18,  126,  231,    0,    0,    0,   19,  217,
  115,    0,  115,    0,  169,    7,   23,   19,    8,    0,
    0,    0,   10,    0,    0,   20,    0,  353,    0,   11,
   12,   13,   14,   76,   15,   16,   17,   18,  173,    7,
    0,    0,    8,   47,   36,    0,   10,   36,   20,    0,
  398,    0,    0,   11,   12,   13,   14,    0,   15,   16,
   17,   18,   36,  305,   36,   70,   70,   70,   70,    0,
   70,   23,   19,    0,    0,  115,    0,    0,  125,    7,
    0,    0,    8,  118,    0,  348,   10,    0,    0,   74,
   16,   17,   18,   11,   12,   13,   14,  376,   15,   16,
   17,   18,  118,  121,  118,  121,  121,  121,   11,   12,
   13,   14,  120,  203,    0,  120,    0,   76,  397,    0,
    7,  121,  121,    8,  121,    0,   47,   10,   36,  122,
  120,  122,  122,  122,   11,   12,   13,   14,    0,   15,
   16,   17,   18,    0,    0,    0,    0,  122,  122,    0,
  122,    0,  248,    0,  123,    0,  123,  123,  123,   11,
   12,   13,   14,    7,  203,    0,    8,  118,    0,    0,
   10,    0,  123,  123,    0,  123,    0,   11,   12,   13,
   14,    0,   15,   16,   17,   18,    7,  121,    0,    8,
   23,   19,    0,   10,    0,    0,  120,    0,    0,    0,
   11,   12,   13,   14,    0,   15,   16,   17,   18,    0,
    0,    0,    0,  122,  125,    0,    0,   23,   19,    0,
  115,  115,  115,  115,    0,   74,   16,   17,   18,    5,
    6,    0,  125,    7,    0,    0,    8,    0,  123,    9,
   10,    0,    0,   74,   16,   17,   18,    0,   12,   13,
   14,    0,   15,   16,   17,   18,    0,    0,    0,   36,
   23,   19,    0,    0,    0,    0,    0,   76,   76,   76,
   76,  325,   76,   36,   36,   36,   36,    0,   36,   36,
   36,   36,    0,   36,    5,    6,    0,  247,    7,   23,
   19,    8,  292,    0,    9,   10,  139,   11,   12,   13,
   14,    0,  203,   12,   13,   14,    0,   15,   16,   17,
   18,    0,  118,  118,  118,  118,   23,   19,  121,   11,
   12,   13,   14,    0,  203,    0,    0,  120,    0,    0,
    0,    0,  121,  121,  121,  121,  303,  121,  121,  121,
  121,  402,  121,    0,  122,    0,  120,  120,  120,  120,
    0,  120,   11,   12,   13,   14,    0,  203,  122,  122,
  122,  122,    0,  122,  122,  122,  122,    0,  122,  123,
  403,    0,    0,  119,    0,  213,  213,  116,    0,  213,
  213,  117,    0,  123,  123,  123,  123,    0,  123,  123,
  123,  123,  119,  123,  119,    0,  116,  411,  116,    0,
  117,    0,  117,    5,    6,    0,  324,    7,  342,    0,
    8,    0,    0,    9,   10,  132,  132,  392,  214,    0,
    0,    0,   12,   13,   14,    0,   15,   16,   17,   18,
    5,    6,    0,  214,    7,  107,    0,    8,  220,  220,
    9,   10,   11,   12,   13,   14,    0,  203,    0,   12,
   13,   14,    0,   15,   16,   17,   18,  119,    0,    0,
    0,  116,  213,    0,    0,  117,    0,    0,    0,    0,
    0,    0,  213,    5,    6,    0,    0,    7,  213,    0,
    8,    0,    0,    9,   10,  213,   11,   12,   13,   14,
    0,  203,   12,   13,   14,    0,   15,   16,   17,   18,
    0,    0,    5,    6,    0,    0,    7,    0,    0,    8,
    0,    0,    9,   10,    0,    0,    0,    0,    0,    0,
    0,   12,   13,   14,    0,   15,   16,   17,   18,    5,
    6,    0,    0,    7,    0,    0,    8,  220,    0,    9,
   10,    0,    0,    0,  220,    0,    0,    0,   12,   13,
   14,    0,   15,   16,   17,   18,    0,    0,   11,   12,
   13,   14,    0,  203,    0,    0,    0,   11,   12,   13,
   14,    0,  203,    0,    0,    0,    0,    0,    0,  344,
  344,    0,    0,    0,  132,  132,    0,  314,  315,  316,
  317,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  119,  119,  119,  119,  116,  116,  116,  116,
  117,  117,  117,  117,  184,  186,  187,  188,  189,  190,
  191,    0,    0,  195,    0,  195,    0,    0,    0,    0,
  107,    0,    0,    0,    0,    0,    0,  232,    0,    0,
    0,    0,    0,    0,  107,  107,  107,  107,  107,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  344,    0,    0,    0,  344,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  310,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          2,
   22,   66,   45,    2,    2,   61,   40,   10,   41,  282,
    8,   31,   41,   41,   40,    0,  125,   20,   32,   22,
    2,   24,   20,  125,   22,   24,   24,  323,   10,   44,
   41,   44,  122,  123,   40,   66,  260,   41,   20,   41,
   22,   41,   24,   66,   59,  256,   59,   44,   66,   44,
   66,   44,   58,  118,  119,  118,  119,  122,  123,   44,
   45,   40,   37,   66,   59,   41,   59,   42,   66,  280,
  262,  280,   47,  265,  139,   40,   60,   40,   62,   44,
    2,   41,  378,   86,   66,   40,   89,   86,   86,  123,
   89,   89,  178,  179,  180,  181,   66,  123,   43,   40,
   45,   41,   24,   44,   86,   40,   40,   89,  139,   44,
   44,   40,    2,  256,  125,   44,  340,  123,  183,  280,
   66,  139,   40,  139,   59,   59,   40,   40,  125,   41,
  264,  221,   44,  205,   24,   66,  139,  280,  228,   40,
  205,  139,  205,  215,  123,  418,  168,   59,   41,  125,
  215,    2,  215,   40,  256,   66,  221,  139,  123,   44,
  123,  270,  271,  228,   44,  168,  290,  291,  123,  139,
  168,  221,   40,   24,   59,   44,  345,  280,  228,   59,
  349,   44,  123,  280,  249,  125,  168,  273,  123,  123,
   59,   46,  212,  139,  123,  260,   59,   44,  263,  264,
  256,  265,   41,  211,  265,  123,  220,   44,  139,  123,
  123,  219,   59,  125,  270,  271,  272,  273,  249,   40,
   41,   44,  123,  256,   45,  259,  249,  256,  139,  260,
  256,  249,   40,  249,  265,   41,  123,  260,  281,  282,
  283,  256,  260,  256,  260,   44,  249,  269,  276,  277,
  278,  249,  280,  280,  256,  123,  256,  260,  323,  270,
  271,  256,  260,  256,   41,  268,  269,  249,  263,  268,
  268,  269,  276,  277,  278,  340,  280,   41,  260,  249,
  345,   44,  302,   46,  349,  256,  268,  269,  272,  273,
  260,   44,  323,  280,  279,  280,  281,  282,  283,  275,
  276,  277,  278,  249,  280,  323,   59,  323,   40,  340,
  270,  271,  377,  378,  260,  123,  280,  340,  249,  125,
  323,   58,  340,  256,  340,  323,  262,  347,   40,  260,
  270,  271,   44,   45,  266,  338,  339,  340,  249,  404,
   44,  323,  340,   41,  409,   40,  377,  378,  125,  260,
   45,  354,   44,  323,  377,  354,  354,   44,  340,  377,
  378,  377,  378,  275,  276,  277,  278,   59,  280,   44,
  340,  256,  354,  404,  377,  378,  256,  323,  263,  377,
  378,  404,  262,  263,   59,   40,  404,   44,  404,   44,
   45,  123,  323,  256,  340,  377,  378,   61,   41,  262,
  263,  404,   59,  406,  407,  125,  404,  377,  378,  340,
  256,  123,  323,  125,  281,  282,  283,  125,  421,  422,
   37,   41,  404,   44,   41,   42,   43,   44,   45,  340,
   47,  377,  378,   41,  404,  256,  275,  276,  277,  278,
  125,  280,   59,   60,   61,   62,  377,  378,  269,  242,
  243,  244,   40,  125,   44,   61,   44,   45,  404,  280,
  281,  282,  283,  125,  270,  271,  377,  378,  123,   59,
  125,   41,   37,  404,   41,   40,   41,   42,   43,   44,
   45,   46,   47,  233,  234,  240,  241,   40,   41,   44,
  256,  256,   45,  404,   59,   60,   61,   62,  275,  276,
  277,  278,  125,  280,   41,   41,   37,  125,  125,   40,
   41,   42,   43,   44,   45,   46,   47,   37,   44,   44,
  125,   41,   42,   43,   44,   45,  280,   47,   59,   60,
   41,   62,   59,  256,   41,  123,   44,  125,  125,   59,
   60,  256,   62,   44,   59,  257,  258,   41,  125,  261,
  280,  256,  264,   41,   41,  267,  268,   41,  123,   41,
  125,   40,    0,  275,  276,  277,  278,   46,  280,  281,
  282,  283,   24,  280,  269,  121,  119,  175,  409,   40,
   41,  114,   61,   44,   45,  280,  281,  282,  283,  123,
  264,    8,  123,  344,  125,   10,   65,  339,  407,   -1,
  422,   -1,  257,  258,   -1,  125,  261,   -1,   -1,  264,
   -1,   -1,  267,  268,   40,   -1,   -1,   -1,   44,   45,
  275,  276,  277,  278,   -1,  280,  281,  282,  283,   -1,
   -1,  125,  275,  276,  277,  278,   -1,  280,   40,  256,
   -1,   -1,   44,   45,  123,   -1,   -1,   -1,  265,   -1,
  256,   41,   -1,  270,  271,  272,  273,  274,  275,  276,
  277,  278,  123,  280,  270,  271,  272,  273,  274,   40,
   41,   -1,  260,  261,   45,   -1,  264,   -1,   40,   -1,
  268,   -1,   44,   45,   -1,   -1,   -1,  275,  276,  277,
  278,  256,  280,  281,  282,  283,   -1,  123,   -1,  125,
   -1,   -1,   -1,  256,   -1,  270,  271,  272,  273,  274,
  275,  276,  277,  278,   -1,  280,  269,   -1,   -1,   40,
   -1,  123,   -1,   44,   45,  256,   -1,  280,  281,  282,
  283,   -1,   -1,   -1,   -1,  125,  256,   -1,   -1,  270,
  271,  272,  273,   -1,  275,  276,  277,  278,   -1,  280,
  270,  271,  272,  273,   -1,  275,  276,  277,  278,   -1,
  280,  123,   40,  125,   -1,   -1,   44,   45,  275,  276,
  277,  278,   -1,  280,   -1,   -1,   -1,  256,  125,   -1,
   -1,  275,  276,  277,  278,   40,  280,   -1,   -1,   44,
   45,  270,  271,  272,  273,  274,   -1,   -1,   -1,  260,
  261,  280,  123,  264,  125,   40,   41,  268,   -1,   -1,
   45,   41,   -1,   -1,  275,  276,  277,  278,   -1,  280,
  281,  282,  283,   40,   41,   -1,   -1,   -1,   45,  125,
   60,   -1,   62,   -1,  260,  261,   44,   45,  264,   -1,
   -1,   -1,  268,   -1,   -1,  123,   -1,  125,   -1,  275,
  276,  277,  278,   41,  280,  281,  282,  283,  260,  261,
   -1,   -1,  264,   40,   41,   -1,  268,   44,  123,   -1,
  125,   -1,   -1,  275,  276,  277,  278,   -1,  280,  281,
  282,  283,   59,   41,   61,  275,  276,  277,  278,   -1,
  280,   44,   45,   -1,   -1,  125,   -1,   -1,  269,  261,
   -1,   -1,  264,   41,   -1,   41,  268,   -1,   -1,  280,
  281,  282,  283,  275,  276,  277,  278,  125,  280,  281,
  282,  283,   60,   41,   62,   43,   44,   45,  275,  276,
  277,  278,   41,  280,   -1,   44,   -1,  125,   41,   -1,
  261,   59,   60,  264,   62,   -1,  123,  268,  125,   41,
   59,   43,   44,   45,  275,  276,  277,  278,   -1,  280,
  281,  282,  283,   -1,   -1,   -1,   -1,   59,   60,   -1,
   62,   -1,  125,   -1,   41,   -1,   43,   44,   45,  275,
  276,  277,  278,  261,  280,   -1,  264,  125,   -1,   -1,
  268,   -1,   59,   60,   -1,   62,   -1,  275,  276,  277,
  278,   -1,  280,  281,  282,  283,  261,  125,   -1,  264,
   44,   45,   -1,  268,   -1,   -1,  125,   -1,   -1,   -1,
  275,  276,  277,  278,   -1,  280,  281,  282,  283,   -1,
   -1,   -1,   -1,  125,  269,   -1,   -1,   44,   45,   -1,
  270,  271,  272,  273,   -1,  280,  281,  282,  283,  257,
  258,   -1,  269,  261,   -1,   -1,  264,   -1,  125,  267,
  268,   -1,   -1,  280,  281,  282,  283,   -1,  276,  277,
  278,   -1,  280,  281,  282,  283,   -1,   -1,   -1,  256,
   44,   45,   -1,   -1,   -1,   -1,   -1,  275,  276,  277,
  278,  125,  280,  270,  271,  272,  273,   -1,  275,  276,
  277,  278,   -1,  280,  257,  258,   -1,  260,  261,   44,
   45,  264,  125,   -1,  267,  268,  123,  275,  276,  277,
  278,   -1,  280,  276,  277,  278,   -1,  280,  281,  282,
  283,   -1,  270,  271,  272,  273,   44,   45,  256,  275,
  276,  277,  278,   -1,  280,   -1,   -1,  256,   -1,   -1,
   -1,   -1,  270,  271,  272,  273,  125,  275,  276,  277,
  278,  125,  280,   -1,  256,   -1,  275,  276,  277,  278,
   -1,  280,  275,  276,  277,  278,   -1,  280,  270,  271,
  272,  273,   -1,  275,  276,  277,  278,   -1,  280,  256,
  125,   -1,   -1,   41,   -1,  118,  119,   41,   -1,  122,
  123,   41,   -1,  270,  271,  272,  273,   -1,  275,  276,
  277,  278,   60,  280,   62,   -1,   60,  125,   62,   -1,
   60,   -1,   62,  257,  258,   -1,  260,  261,  125,   -1,
  264,   -1,   -1,  267,  268,   64,   65,  125,   44,   -1,
   -1,   -1,  276,  277,  278,   -1,  280,  281,  282,  283,
  257,  258,   -1,   59,  261,   61,   -1,  264,  122,  123,
  267,  268,  275,  276,  277,  278,   -1,  280,   -1,  276,
  277,  278,   -1,  280,  281,  282,  283,  125,   -1,   -1,
   -1,  125,  205,   -1,   -1,  125,   -1,   -1,   -1,   -1,
   -1,   -1,  215,  257,  258,   -1,   -1,  261,  221,   -1,
  264,   -1,   -1,  267,  268,  228,  275,  276,  277,  278,
   -1,  280,  276,  277,  278,   -1,  280,  281,  282,  283,
   -1,   -1,  257,  258,   -1,   -1,  261,   -1,   -1,  264,
   -1,   -1,  267,  268,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  276,  277,  278,   -1,  280,  281,  282,  283,  257,
  258,   -1,   -1,  261,   -1,   -1,  264,  221,   -1,  267,
  268,   -1,   -1,   -1,  228,   -1,   -1,   -1,  276,  277,
  278,   -1,  280,  281,  282,  283,   -1,   -1,  275,  276,
  277,  278,   -1,  280,   -1,   -1,   -1,  275,  276,  277,
  278,   -1,  280,   -1,   -1,   -1,   -1,   -1,   -1,  263,
  264,   -1,   -1,   -1,  233,  234,   -1,  236,  237,  238,
  239,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  270,  271,  272,  273,  270,  271,  272,  273,
  270,  271,  272,  273,  103,  104,  105,  106,  107,  108,
  109,   -1,   -1,  112,   -1,  114,   -1,   -1,   -1,   -1,
  256,   -1,   -1,   -1,   -1,   -1,   -1,  126,   -1,   -1,
   -1,   -1,   -1,   -1,  270,  271,  272,  273,  274,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  345,   -1,   -1,   -1,  349,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  230,
};
}
final static short YYFINAL=4;
final static short YYMAXTOKEN=283;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"'%'",null,null,"'('","')'","'*'","'+'",
"','","'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,"':'",
"';'","'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,"CLASS","INTERFACE","IMPLEMENT",
"RETURN","IF","ELSE","END_IF","FOR","IN","RANGE","IMPL","PRINT","TOD",
"EQUAL_OPERATOR","NOT_EQUAL_OPERATOR","GREATER_THAN_OR_EQUAL_OPERATOR",
"LESS_THAN_OR_EQUAL_OPERATOR","MINUS_ASSIGN","VOID","LONG","UINT","DOUBLE",
"CADENA","ID","CTE_DOUBLE","CTE_UINT","CTE_LONG",
};
final static String yyrule[] = {
"$accept : program",
"program : '{' type_declarations '}'",
"program : '{' '}'",
"program :",
"program : '(' ')'",
"program : error",
"type_declarations : type_declaration",
"type_declarations : type_declarations type_declaration",
"type_declaration : class_declaration",
"type_declaration : interface_declaration",
"type_declaration : implement_for_declaration",
"type_declaration : block_statement",
"class_declaration : CLASS class_name class_body",
"class_declaration : CLASS class_name interfaces class_body",
"class_name : ID",
"class_body : '{' class_body_declarations '}'",
"class_body : '{' '}'",
"class_body : '(' class_body_declarations ')'",
"class_body : '(' ')'",
"class_body_declarations : class_body_declaration",
"class_body_declarations : class_body_declarations class_body_declaration",
"class_body_declaration : class_member_declaration",
"class_member_declaration : field_declaration",
"class_member_declaration : method_declaration",
"class_member_declaration : inheritance_declaration",
"field_declaration : type variable_declarators ','",
"field_declaration : type variable_declarators",
"variable_declarators : variable_declarator",
"variable_declarators : variable_declarators ';' variable_declarator",
"variable_declarator : variable_declarator_id",
"variable_declarator : variable_declarator_id '=' variable_initializer",
"variable_declarator : variable_declarator_id error '=' variable_initializer",
"variable_declarator : variable_declarator_id EQUAL_OPERATOR variable_initializer",
"variable_declarator : variable_declarator_id NOT_EQUAL_OPERATOR variable_initializer",
"variable_declarator : variable_declarator_id LESS_THAN_OR_EQUAL_OPERATOR variable_initializer",
"variable_declarator : variable_declarator_id GREATER_THAN_OR_EQUAL_OPERATOR variable_initializer",
"variable_declarator_id : ID",
"variable_initializer : arithmetic_operation",
"method_declaration : method_header method_body ','",
"method_declaration : method_header method_body",
"method_header : result_type method_declarator",
"method_header : type method_declarator",
"result_type : VOID",
"method_declarator : method_name '(' formal_parameter ')'",
"method_declarator : method_name '(' ')'",
"method_declarator : method_name '(' formal_parameter error ')'",
"method_declarator : method_name '{' error '}'",
"method_name : ID",
"method_body : block",
"method_body : ','",
"formal_parameter : type variable_declarator_id",
"real_parameter : arithmetic_operation",
"inheritance_declaration : class_type ','",
"inheritance_declaration : class_type ';' error ','",
"inheritance_declaration : class_type ',' error ';'",
"interfaces : IMPLEMENT interface_type_list",
"interface_type_list : reference_interface",
"interface_type_list : interface_type_list ';' reference_interface",
"interface_type_list : interface_type_list ',' reference_interface",
"interface_declaration : INTERFACE interface_name interface_body",
"interface_name : ID",
"interface_body : '{' interface_member_declaration '}'",
"interface_body : '(' interface_member_declaration ')'",
"interface_body : '{' '}'",
"interface_body : '(' ')'",
"interface_member_declaration : interface_method_declaration",
"interface_member_declaration : interface_member_declaration interface_method_declaration",
"interface_method_declaration : constant_declaration",
"interface_method_declaration : abstract_method_declaration",
"interface_method_declaration : inheritance_declaration",
"constant_declaration : type variable_declarators",
"constant_declaration : type variable_declarators ','",
"abstract_method_declaration : abstract_method_header",
"abstract_method_declaration : abstract_method_header_with_block",
"abstract_method_header_with_block : result_type method_declarator block",
"abstract_method_header : result_type method_declarator ','",
"abstract_method_header : result_type method_declarator",
"abstract_method_header : result_type method_declarator ';'",
"implement_for_declaration : IMPL FOR reference_class ':' implement_for_body",
"implement_for_declaration : IMPL FOR reference_class ':' empty_statement",
"implement_for_declaration : IMPL FOR error ':' implement_for_body ','",
"implement_for_declaration : IMPL FOR reference_class implement_for_body",
"implement_for_body : '{' implement_for_body_declarations '}'",
"implement_for_body : '{' '}'",
"implement_for_body : '(' implement_for_body_declarations ')'",
"implement_for_body : '(' ')'",
"implement_for_body_declarations : implement_for_method_declaration",
"implement_for_body_declarations : implement_for_body_declarations implement_for_method_declaration",
"implement_for_method_declaration : impl_for_method_header block",
"implement_for_method_declaration : impl_for_method_header ','",
"implement_for_method_declaration : impl_for_method_header ';'",
"impl_for_method_header : result_type impl_for_method_declarator",
"impl_for_method_header : type impl_for_method_declarator",
"impl_for_method_declarator : impl_method_name '(' impl_formal_parameter ')'",
"impl_for_method_declarator : impl_method_name '(' ')'",
"impl_for_method_declarator : impl_method_name '(' formal_parameter error ')'",
"impl_for_method_declarator : impl_method_name '{' error '}'",
"impl_formal_parameter : type ID",
"impl_method_name : ID",
"assignment : left_hand_side '=' arithmetic_operation",
"assignment : left_hand_side MINUS_ASSIGN arithmetic_operation",
"assignment : left_hand_side error arithmetic_operation",
"assignment : left_hand_side EQUAL_OPERATOR arithmetic_operation",
"assignment : left_hand_side NOT_EQUAL_OPERATOR arithmetic_operation",
"assignment : left_hand_side LESS_THAN_OR_EQUAL_OPERATOR arithmetic_operation",
"assignment : left_hand_side GREATER_THAN_OR_EQUAL_OPERATOR arithmetic_operation",
"left_hand_side : reference_type",
"left_hand_side : invocation",
"left_hand_side : factor",
"field_acces : primary '.' ID",
"primary : ID",
"primary : field_acces",
"equality_expression : relational_expression",
"equality_expression : equality_expression EQUAL_OPERATOR relational_expression",
"equality_expression : equality_expression NOT_EQUAL_OPERATOR relational_expression",
"relational_expression : additive_expression",
"relational_expression : relational_expression '<' additive_expression",
"relational_expression : relational_expression '>' additive_expression",
"relational_expression : relational_expression GREATER_THAN_OR_EQUAL_OPERATOR additive_expression",
"relational_expression : relational_expression LESS_THAN_OR_EQUAL_OPERATOR additive_expression",
"arithmetic_operation : additive_expression",
"additive_expression : multiplicative_expression",
"additive_expression : additive_expression '+' multiplicative_expression",
"additive_expression : additive_expression '-' multiplicative_expression",
"multiplicative_expression : unary_expression",
"multiplicative_expression : multiplicative_expression '*' unary_expression",
"multiplicative_expression : multiplicative_expression '/' unary_expression",
"multiplicative_expression : multiplicative_expression '%' unary_expression",
"unary_expression : factor",
"unary_expression : reference_type",
"unary_expression : invocation",
"unary_expression : conversion_expression",
"unary_expression : '(' arithmetic_operation ')'",
"unary_expression : '(' ')'",
"conversion_expression : TOD '(' arithmetic_operation ')'",
"conversion_expression : TOD '(' error ')'",
"conversion_expression : TOD '{' error '}'",
"conversion_expression : TOD '{' '}'",
"conversion_expression : TOD '(' ')'",
"conversion_expression : TOD",
"factor : CTE_DOUBLE",
"factor : CTE_UINT",
"factor : CTE_LONG",
"factor : '-' CTE_DOUBLE",
"factor : '-' CTE_LONG",
"factor : '-' CTE_UINT",
"invocation : reference_function '(' real_parameter ')'",
"invocation : reference_function '(' ')'",
"invocation : reference_method '(' real_parameter ')'",
"invocation : reference_method '(' ')'",
"invocation : reference_method '{' error '}'",
"invocation : reference_function '{' error '}'",
"invocation : reference_function '(' real_parameter error ')'",
"invocation : reference_method '(' real_parameter error ')'",
"type : primitive_type",
"type : class_type",
"primitive_type : numeric_type",
"numeric_type : integral_type",
"numeric_type : floating_type",
"integral_type : UINT",
"integral_type : LONG",
"floating_type : DOUBLE",
"reference_interface : ID",
"class_type : ID",
"reference_class : ID",
"reference_function : ID",
"reference_method : field_acces",
"reference_type : primary",
"block : '{' block_statements RETURN ',' '}'",
"block : '{' block_statements RETURN ',' block_statements '}'",
"block : '{' RETURN ',' '}'",
"block : '{' RETURN '}'",
"block : '{' RETURN ',' block_statements '}'",
"block : '{' block_statements '}'",
"block : '(' block_statements RETURN ',' ')'",
"block : '(' RETURN ',' ')'",
"block : '{' '}'",
"block : '(' ')'",
"executable_block : '{' executable_block_statements '}'",
"executable_block : '{' '}'",
"executable_block : '{' executable_block_statements RETURN ',' '}'",
"executable_block : '{' executable_block_statements RETURN ',' executable_block_statements '}'",
"executable_block : '{' RETURN ',' '}'",
"$$1 :",
"executable_block : '{' RETURN ',' executable_block_statements '}' $$1",
"block_statements : block_statement",
"block_statements : block_statements block_statement",
"executable_block_statements : executable_statement",
"executable_block_statements : executable_block_statements executable_statement",
"block_statement : local_variable_declaration",
"block_statement : statement",
"executable_statement : if_then_declaration",
"executable_statement : if_then_else_declaration",
"executable_statement : for_in_range_statement",
"executable_statement : print_statement",
"executable_statement : expression_statement",
"executable_statement : empty_statement",
"executable_statement : class_declaration",
"executable_statement : interface_declaration",
"executable_statement : implement_for_declaration",
"executable_statement : local_variable_declaration",
"local_variable_declaration : type variable_declarators ','",
"statement : statement_without_trailing_substatement",
"statement : if_then_declaration",
"statement : if_then_else_declaration",
"statement : for_in_range_statement",
"statement : function_declaration",
"statement : print_statement",
"statement_without_trailing_substatement : block",
"statement_without_trailing_substatement : empty_statement",
"statement_without_trailing_substatement : expression_statement",
"expression_statement : statement_expression ','",
"expression_statement : statement_expression ';'",
"statement_expression : assignment",
"statement_expression : invocation",
"empty_statement : ','",
"if_then_declaration : IF if_then_cond if_then_body END_IF ','",
"if_then_declaration : IF if_then_cond if_then_body END_IF ';'",
"if_then_declaration : IF if_then_cond if_then_body ','",
"if_then_declaration : IF if_then_cond if_then_body ';'",
"if_then_declaration : IF if_then_cond if_then_body END_IF error '}'",
"if_then_declaration : IF if_then_cond if_then_body error '}'",
"if_then_cond : '(' equality_expression ')'",
"if_then_cond : '(' error ')'",
"if_then_cond : '{' equality_expression '}'",
"if_then_cond : '(' ')'",
"if_then_body : executable_statement",
"if_then_body : executable_block",
"if_then_else_declaration : IF if_then_cond if_then_else_body END_IF ','",
"if_then_else_declaration : IF if_then_cond if_then_else_body ','",
"if_then_else_declaration : IF if_then_cond if_then_else_body END_IF ';'",
"if_then_else_declaration : IF if_then_cond if_then_else_body ';'",
"if_then_else_declaration : IF if_then_cond if_then_else_body END_IF error '}'",
"if_then_else_declaration : IF if_then_cond if_then_else_body error '}'",
"if_else_then_body : executable_statement",
"if_else_then_body : executable_block",
"if_else_body : executable_statement",
"if_else_body : executable_block",
"if_then_else_body : if_else_then_body ELSE if_else_body",
"for_in_range_statement : FOR for_in_range_initializer IN RANGE for_in_range_cond for_in_range_body",
"for_in_range_initializer : reference_type",
"for_in_range_initializer : error IN",
"for_in_range_cond : '(' for_init ';' for_end ';' for_update ')'",
"for_in_range_cond : '(' for_init ',' for_end ',' for_update ')'",
"for_in_range_cond : '{' for_init error '}'",
"for_in_range_body : executable_block",
"for_in_range_body : executable_statement",
"for_init : factor",
"for_update : factor",
"for_end : factor",
"function_declaration : method_header method_body_without_prototype",
"method_body_without_prototype : block",
"method_body_without_prototype : ','",
"print_statement : PRINT CADENA ','",
"print_statement : PRINT CADENA error",
"print_statement : PRINT CADENA ';'",
"print_statement : PRINT factor ','",
"print_statement : PRINT primary ','",
"print_statement : PRINT invocation ','",
"print_statement : PRINT ','",
"print_statement : PRINT '\\000'",
};

//#line 948 "grammar.y"

private static AnalizadorLexico aLexico;
private static Tercetos tercetos;
private static Scope scope;
private static int yylval_recognition = 0;

// This method is the one where BYACC/J expects to obtain its input tokens. 
// Wrap any file/string scanning code you have in this function. This method should return <0 if there is an error, and 0 when it encounters the end of input. See the examples to clarify what we mean.
int yylex() {
  Tupla<String, Short> t = aLexico.generateToken();
  String lexema = t.getFirst();
  Short token = t.getSecond();

  if (lexema != null){
    yylval = new ParserVal(lexema);
    yylval_recognition += 1;
  }
  
  return token;
}

// This method is expected by BYACC/J, and is used to provide error messages to be directed to the channels the user desires.
void yyerror(String msg) {
    System.out.println("Error en el parser: " + msg + " in " + val_peek(0).sval);
}


// ###############################################################
// metodos de lectura de los programadas
// ###############################################################

private static ArrayList<String> listFilesInDirectory(String path) {
  // Obtén el directorio actual
  File element = new File(System.getProperty("user.dir") + "/" + path);

  // Verifica si es un directorio o archivo válido
  if (element.isDirectory() || element.isFile()) {
    // Lista de archivos y directorios en el directorio actual
    File[] filesAndDirs = element.listFiles();
    ArrayList<String> out = new ArrayList<>();

    for (File fileOrDir : filesAndDirs) {
      out.add(fileOrDir.getName());
    }

    Collections.sort(out);

    // Itera a través de los archivos y directorios
    int i = 0;
    for (String name : out) {
      System.out.println("[" + i + "]" + ": " + name);
      i++;
    }

    return out;
  } else {
    System.err.println("f es un directorio válido.");
  }

  return null;
}

private static String generatePath() {
  ArrayList<String> directories = listFilesInDirectory("sample_programs");
  String path = "";

  if (!directories.isEmpty()) {
    Scanner scanner = new Scanner(System.in);
    int indice = -1;

    while (indice < 0) {
      System.out.print("Ingrese el numero de carpeta a acceder: ");
      String input = scanner.nextLine();
   
      try {
        indice = Integer.parseInt(input);
      } catch (Exception ex) {
        indice = -1;
      } 

      if (indice < directories.size() && indice >= 0) {
        path = directories.get(indice);
        directories = listFilesInDirectory("sample_programs" + "/" + path);
      } else {
        System.out.println("El indice no es correcto, ingrese nuevamente...");
        indice = -1;
      }

    }

    if (!directories.isEmpty()) {
      indice = -1;

      while (indice < 0) {

        System.out.print("Ingrese el numero de archivo binario a compilar: ");
        String input = scanner.nextLine();

        try {
          indice = Integer.parseInt(input);
        } catch (Exception ex) {
          indice = -1;
        } 

        if (indice < directories.size() && indice >= 0) {
          path += "/" + directories.get(Integer.parseInt(input));
        } else {
          System.out.println("El indice no es correcto, ingrese nuevamente...");
          indice = -1;
        }

      }
    }
    scanner.close();
  }
  return path;
}

public static void main (String [] args) throws IOException {
    System.out.println("Iniciando compilacion...");

    String input = generatePath();

    aLexico = new AnalizadorLexico(input);

    if ( !aLexico.hasReadWell() )
        return;

    Parser aSintactico = new Parser();
    scope = new Scope();
    tercetos = new Tercetos();
    scope.addObserver(tercetos); //Añado al terceto para avisarle cuando cambio de scope

    aSintactico.run();

    //Borrado de los identificadores que quedan sin ambito
    TablaSimbolos.purge();

    

    if (!Logger.errorsOcurred()){
      System.out.println("Se generó el Assembler.\n"); //Para la parte 4, generacion de codigo maquina
      tercetos.printRules();
      GeneradorAssembler.generarCodigoAssembler(tercetos);
      Logger.dumpASM();
      System.out.println("ASSEMBLER \n" + GeneradorAssembler.codigoAssembler);
    } else 
      System.out.println("Se produjeron errores.\n");
      
    //aSintactico.dump_stacks(yylval_recognition);
    System.out.println(Logger.dumpLog());



    System.out.println(aLexico.getProgram());
}

//#line 1125 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 4:
//#line 44 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Un programa debe estar delimitado por llaves '{}'.");}
break;
case 5:
//#line 45 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No se reconocio el programa.");}
break;
case 8:
//#line 57 "grammar.y"
{scope.reset(); if (!val_peek(0).sval.isEmpty()) scope.changeScope(val_peek(0).sval);}
break;
case 9:
//#line 58 "grammar.y"
{scope.reset(); if (!val_peek(0).sval.isEmpty()) scope.changeScope(val_peek(0).sval);}
break;
case 10:
//#line 59 "grammar.y"
{scope.reset();}
break;
case 11:
//#line 60 "grammar.y"
{scope.reset();}
break;
case 12:
//#line 63 "grammar.y"
{
                        yyval = val_peek(1);
                        if (!val_peek(1).sval.isEmpty()){
                          Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una clase.");

                          String error = TablaClases.chequeoAtributoSobreescrito(val_peek(1).sval);
                          if (error != null) 
                            Logger.logError(aLexico.getProgramPosition(), error);
                        }
                    }
break;
case 13:
//#line 73 "grammar.y"
{
                        yyval = val_peek(2);
                        if (!val_peek(2).sval.isEmpty()){
                          Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una CLASS.");

                          String error = TablaClases.chequeoAtributoSobreescrito(val_peek(2).sval);
                          if (error != null) 
                            Logger.logError(aLexico.getProgramPosition(), error);
                          if (!val_peek(1).sval.isEmpty()) {
                            String msj = TablaClases.implementaMetodosInterfaz(val_peek(2).sval,val_peek(1).sval);
                            if (msj.isEmpty())
                              Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una CLASS que implementa una interface e implementa todos sus metodos.");
                            else
                              Logger.logError(aLexico.getProgramPosition(), msj);
                          }

                        }            
                    }
break;
case 14:
//#line 93 "grammar.y"
{
              if(!scope.isDeclaredInMyScope(val_peek(0).sval)){
                TablaSimbolos.addClase(val_peek(0).sval); 
                TablaClases.addClase(val_peek(0).sval);
                yyval = new ParserVal(val_peek(0).sval);
              } else {
                Logger.logError(aLexico.getProgramPosition(), "La clase " + val_peek(0).sval + " ya esta declarada en el ambito" + scope.getCurrentScope() + ".");
                yyval = new ParserVal("");
              }
                scope.stack(val_peek(0).sval); 
            }
break;
case 17:
//#line 108 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "La declaracion de una clase debe estar delimitado por llaves \"{...}\".");}
break;
case 18:
//#line 109 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "La declaracion de una clase debe estar delimitado por llaves \"{...}\".");}
break;
case 25:
//#line 124 "grammar.y"
{
                      System.out.println("Las variables son las siguientes, estoy en gramatica " + val_peek(1).sval);
                      if (!(val_peek(2).sval.isEmpty() || val_peek(1).sval.isEmpty())) {
                        ArrayList<String> ambitos = scope.getAmbitos(val_peek(1).sval);
                        String _attributes = ambitos.get(0);
                        String _class = "";
                        if (ambitos.size() >= 2){
                            _class = ambitos.get(2);
                        }

                        Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una declaracion de atributo/s.");
                        TablaSimbolos.addTipoVariable(val_peek(2).sval, val_peek(1).sval);
                        
                        if (TablaSimbolos.isClass(val_peek(2).sval + Scope.getScopeMain())) {
                            TablaClases.addAtributos(val_peek(2).sval, _attributes, _class);
                            TablaClases.addInstancia(val_peek(2).sval, val_peek(1).sval);
                            TablaSimbolos.addUsoInstancia(val_peek(1).sval);
                        }
                        else {
                            TablaSimbolos.addUsedVariables(val_peek(1).sval);
                            TablaClases.addAtributos(_attributes, _class);
                        }
                      }
                   }
break;
case 26:
//#line 148 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Se esperaba una \',\' en el final de la sentencia.");}
break;
case 28:
//#line 152 "grammar.y"
{
                        if (!(val_peek(2).sval.isEmpty() || val_peek(0).sval.isEmpty()))
                          yyval = new ParserVal(val_peek(2).sval.substring(0, val_peek(2).sval.indexOf(Scope.SEPARATOR)) + ";" + val_peek(0).sval);
                        else {
                          if (val_peek(2).sval.isEmpty())
                            yyval = new ParserVal(val_peek(0).sval);
                          else 
                            yyval = new ParserVal(val_peek(2).sval);
                        }
                     }
break;
case 30:
//#line 167 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No esta permitida la inicialización en la declaracion de variables.");}
break;
case 31:
//#line 168 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No esta permitida la inicialización en la declaracion de variables.");}
break;
case 32:
//#line 169 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No esta permitida la inicialización en la declaracion de variables.");}
break;
case 33:
//#line 170 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No esta permitida la inicialización en la declaracion de variables.");}
break;
case 34:
//#line 171 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No esta permitida la inicialización en la declaracion de variables.");}
break;
case 35:
//#line 172 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No esta permitida la inicialización en la declaracion de variables.");}
break;
case 36:
//#line 175 "grammar.y"
{
                          if (!scope.isDeclaredInMyScope(val_peek(0).sval)) {
                              yyval = new ParserVal(scope.changeScope(val_peek(0).sval));
                          }
                          else {
                              Logger.logError(aLexico.getProgramPosition() - 1, "La variable " + val_peek(0).sval + " ya esta declarado en el ambito " + scope.getCurrentScope() + ".");
                              yyval = new ParserVal("");
                          }
                        }
break;
case 38:
//#line 189 "grammar.y"
{
                      if (!val_peek(2).sval.isEmpty()) {
                        ArrayList<String> ambitos = scope.getAmbitos(val_peek(2).sval);
                        if (ambitos.size() > 2) {
                          String _method = ambitos.get(0); 
                          String _class = ambitos.get(2);

                            if (val_peek(1).sval.isEmpty()) {
                              TablaClases.addMetodoIMPL(_method, _class);
                              TablaSimbolos.setFuncPrototype(val_peek(2).sval);
                            } else {
                              TablaClases.addMetodo(_method, _class);
                              TablaSimbolos.setImplemented(val_peek(2).sval);
                            }
                        } else { 
                            Logger.logError(aLexico.getProgramPosition(), "Hay un error en la declaracion del metodo.");
                        }
                      scope.deleteLastScope();
                      }
                   }
break;
case 39:
//#line 209 "grammar.y"
{
                      if (!val_peek(1).sval.isEmpty()) {
                        ArrayList<String> ambitos = scope.getAmbitos(val_peek(1).sval);
                        
                        if (ambitos.size() > 2) {
                          String _method = ambitos.get(0); 
                          String _class = ambitos.get(2);

                            if (val_peek(0).sval.isEmpty()) {
                              TablaClases.addMetodoIMPL(_method, _class);
                              TablaSimbolos.setFuncPrototype(val_peek(1).sval);
                            } else {
                              TablaClases.addMetodo(_method, _class);
                              TablaSimbolos.setImplemented(val_peek(1).sval);
                            }
                        } else { 
                            Logger.logError(aLexico.getProgramPosition(), "Hay un error en la declaracion del metodo.");
                        }
                      scope.deleteLastScope();
                      }
                   }
break;
case 40:
//#line 232 "grammar.y"
{yyval = val_peek(0);}
break;
case 41:
//#line 233 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No se permite retornar un tipo, el retorno debe ser VOID."); yyval = new ParserVal("");}
break;
case 43:
//#line 239 "grammar.y"
{
                      String ref = val_peek(3).sval;
                      String par = val_peek(1).sval;
                      if (!ref.isEmpty() && !par.isEmpty()) {
                        yyval = new ParserVal(ref);
                        TablaSimbolos.addParameter(ref, par);
                      } else {
                        yyval = new ParserVal("");
                      }
                      
                  }
break;
case 44:
//#line 250 "grammar.y"
{
                      String ref = val_peek(2).sval;
                      if (!ref.isEmpty()) {
                        Logger.logRule(aLexico.getProgramPosition(), "Se reconocio un metodo sin p/j de parametro.");
                        yyval = new ParserVal(ref);
                        TablaSimbolos.addParameter(ref);
                      } else {
                        yyval = val_peek(2);
                      } 
                      
                  }
break;
case 45:
//#line 261 "grammar.y"
{ Logger.logError(aLexico.getProgramPosition(), "Solo se permite la declaracion de un unico parametro formal.");}
break;
case 46:
//#line 262 "grammar.y"
{ Logger.logError(aLexico.getProgramPosition(), "La declaracion de un metodo debe estar delimitado por parentesis \"(...)\"."); }
break;
case 47:
//#line 265 "grammar.y"
{
                if(!scope.isDeclaredInMyScope(val_peek(0).sval)) {
                  yyval = new ParserVal(val_peek(0).sval);
                  if (scope.hasPassedNesting()) {
                    Logger.logError(aLexico.getProgramPosition(), "Solo se permite 1 nivel de anidamiento, el metodo/funcion " + val_peek(0).sval + " no cumple con esto.");
                    yyval = new ParserVal("");
                  } else {
                    yyval = new ParserVal(scope.changeScope(val_peek(0).sval));
                    TablaSimbolos.addFunction(yyval.sval);
                    scope.stack(val_peek(0).sval);
                  }
                } else {
                  Logger.logError(aLexico.getProgramPosition(), "El metodo ya esta declarado en el ambito" + scope.getCurrentScope() + ".");
                  yyval = new ParserVal("");
                  }                 
              }
break;
case 49:
//#line 285 "grammar.y"
{yyval = new ParserVal("");}
break;
case 50:
//#line 290 "grammar.y"
{
                      if (TablaSimbolos.isClass(val_peek(1).sval + Scope.getScopeMain())) 
                        Logger.logError(aLexico.getProgramPosition(), "No se permite que un parametro formal sea del tipo de una clase.");
                      
                      if (!val_peek(0).sval.isEmpty()) {
                          yyval = new ParserVal(val_peek(0).sval);
                          TablaSimbolos.addTipoVariable(val_peek(1).sval, val_peek(0).sval);
                      } else yyval = new ParserVal(""); 
                  }
break;
case 52:
//#line 304 "grammar.y"
{
                            Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una herencia compuesta.");

                            if (!val_peek(1).sval.isEmpty()) { /*si existe la clase a la cual quiere heredar*/
                                ArrayList<String> ambitos = scope.getAmbitos();
                                String _parentClass = val_peek(1).sval; 
                                String _class = ambitos.get(1);
                                if (!TablaClases.tieneHerencia(_class)){
                                    TablaClases.addHerencia(_class, _parentClass);
                                } else {
                                    Logger.logError(aLexico.getProgramPosition(), "No se permite herencia multiple");
                                }
                                Logger.logRule(aLexico.getProgramPosition(), "La clase " + _class + " hereda de " + _parentClass + ".");
                            } else {
                                Logger.logError(aLexico.getProgramPosition(), "La clase a la cual se quiere heredar no existe");
                            }
                        }
break;
case 53:
//#line 321 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No se permite herencia multiple.");}
break;
case 54:
//#line 322 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No se permite herencia multiple.");}
break;
case 55:
//#line 325 "grammar.y"
{yyval = new ParserVal(val_peek(0).sval); if (val_peek(0).sval.contains(";")) Logger.logError(aLexico.getProgramPosition(), "No se permite implementar multiples interfaces.");}
break;
case 57:
//#line 329 "grammar.y"
{yyval = new ParserVal(val_peek(2).sval + ";" + val_peek(0).sval);}
break;
case 58:
//#line 330 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Las interfaces deben estar separadas por ';'.");}
break;
case 59:
//#line 333 "grammar.y"
{yyval = val_peek(1);}
break;
case 60:
//#line 336 "grammar.y"
{
                    if (!scope.isDeclaredInMyScope(val_peek(0).sval)) {
                      TablaClases.addInterface(val_peek(0).sval);
                      TablaSimbolos.addInterface(val_peek(0).sval);
                      yyval = new ParserVal(val_peek(0).sval);
                    } else {
                      Logger.logError(aLexico.getProgramPosition(), "La interface " + val_peek(0).sval + " ya esta declarada en el ambito" + scope.getCurrentScope() + ".");
                      yyval = new ParserVal("");
                    }
                      scope.stack(val_peek(0).sval); 
                }
break;
case 62:
//#line 350 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "El cuerpo de la interface debe estar delimitado por llaves \"{...}\".");}
break;
case 64:
//#line 352 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "El cuerpo de la interface debe estar delimitado por llaves \"{...}\".");}
break;
case 67:
//#line 359 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No se permite la declaracion de constantes en las interfaces.");}
break;
case 68:
//#line 360 "grammar.y"
{
                                if (!val_peek(0).sval.isEmpty()) {
                                  ArrayList<String> ambitos = scope.getAmbitos(val_peek(0).sval);
                                  String _method = ambitos.get(0);
                                  String _class = ambitos.get(2);

                                  TablaClases.addMetodoIMPL(_method, _class);

                                  scope.deleteLastScope();
                                }
                             }
break;
case 69:
//#line 371 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No esta permitida la herencia en una interface.");}
break;
case 73:
//#line 379 "grammar.y"
{yyval = new ParserVal(""); Logger.logError(aLexico.getProgramPosition(), "No se puede declarar un bloque dentro de un metodo en una interface.");}
break;
case 75:
//#line 385 "grammar.y"
{yyval = val_peek(1);}
break;
case 76:
//#line 386 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Se esperaba una \',\' en el final de la sentencia.");}
break;
case 77:
//#line 387 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Se esperaba una \',\' no \';\'en el final de la sentencia.");}
break;
case 79:
//#line 391 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Es necesario implementar el cuerpo del metodo.");}
break;
case 80:
//#line 392 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Se debe referenciar a una clase.");}
break;
case 81:
//#line 393 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Seguido de la referencia a la clase debe ir el caracter ':'.");}
break;
case 84:
//#line 398 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "El cuerpo de la interface debe estar delimitado por llaves \"{...}\".");}
break;
case 85:
//#line 399 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "El cuerpo de la interface debe estar delimitado por llaves \"{...}\".");}
break;
case 88:
//#line 407 "grammar.y"
{

                                    if (!val_peek(1).sval.isEmpty()){

                                      ArrayList<String> ambitos = scope.getAmbitos(val_peek(1).sval);
                                      if (ambitos.size() > 2) {
                                        String _class = ambitos.get(1); 
                                        String _method = ambitos.get(2);                                      

                                        if (!TablaClases.esUnMetodoAImplementar(_method, _class)){
                                          if (TablaClases.esUnMetodoConcreto(_method, _class)) {
                                            Logger.logError(aLexico.getProgramPosition(), "Se intentó implementar un metodo ya implementado (IMPL FOR)");
                                          } else {
                                            Logger.logError(aLexico.getProgramPosition(), "Se intentó implementar un metodo que no existe (IMPL FOR)");
                                          }  
                                        } else {
                                          TablaSimbolos.setImplemented(val_peek(1).sval.replaceAll(".*@([^@]*)@([^@]*)@([^@:]*):([^@]*)", "$3@$1@$2"));
                                          TablaClases.setMetodoIMPL(_method, _class);
                                        }
                                      }
                                      scope.deleteLastScope();
                                     }
                                  }
break;
case 89:
//#line 430 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Es necesario implementar el metodo de la clase.");}
break;
case 90:
//#line 431 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Es necesario implementar el metodo de la clase.");}
break;
case 91:
//#line 435 "grammar.y"
{yyval = val_peek(0);}
break;
case 92:
//#line 436 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No se permite retornar un tipo, el retorno debe ser VOID."); yyval = new ParserVal("");}
break;
case 93:
//#line 441 "grammar.y"
{
                                String ref = val_peek(3).sval;
                                String par = val_peek(1).sval;

                                if (!ref.isEmpty()) 
                                  yyval = new ParserVal(ref + TablaClases.TYPE_SEPARATOR + par);
                                else 
                                  Logger.logError(aLexico.getProgramPosition(), "No se reconocio el metodo a sobreescribir con p/j de parametro.");
                                
                            }
break;
case 94:
//#line 451 "grammar.y"
{
                                yyval = new ParserVal(val_peek(2).sval + TablaClases.TYPE_SEPARATOR + TablaSimbolos.SIN_PARAMETRO);
                            }
break;
case 95:
//#line 454 "grammar.y"
{ Logger.logError(aLexico.getProgramPosition(), "Solo se permite la declaracion de un unico parametro formal.");}
break;
case 96:
//#line 455 "grammar.y"
{ Logger.logError(aLexico.getProgramPosition(), "La declaracion de un metodo debe estar delimitado por parentesis \"(...)\"."); }
break;
case 97:
//#line 458 "grammar.y"
{yyval = val_peek(1);}
break;
case 98:
//#line 462 "grammar.y"
{
                    scope.stack(val_peek(0).sval);
                    yyval = new ParserVal(scope.getCurrentScope());
                  }
break;
case 99:
//#line 476 "grammar.y"
{
                Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una asignacion.");
                tercetos.add("=", val_peek(2).sval, val_peek(0).sval, tercetos.typeTerceto(val_peek(2).sval, val_peek(0).sval));
                tercetos.declaredFactorsUsed(val_peek(0).sval);
           }
break;
case 100:
//#line 481 "grammar.y"
{
                Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una asignacion de resta.");
                tercetos.add("=", val_peek(2).sval, tercetos.add("-", val_peek(2).sval, val_peek(0).sval));
                tercetos.declaredFactorsUsed(val_peek(0).sval);
           }
break;
case 101:
//#line 486 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Las asignaciones se deben hacer con el caracter '=' o '-='.");}
break;
case 102:
//#line 487 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Las asignaciones se deben hacer con el caracter '=' o '-='.");}
break;
case 103:
//#line 488 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Las asignaciones se deben hacer con el caracter '=' o '-='.");}
break;
case 104:
//#line 489 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Las asignaciones se deben hacer con el caracter '=' o '-='.");}
break;
case 105:
//#line 490 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Las asignaciones se deben hacer con el caracter '=' o '-='.");}
break;
case 107:
//#line 494 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No se puede invocar un metodo/funcion en el lado izquierdo de una asignación.");}
break;
case 108:
//#line 495 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No se puede utilizar constantes en el lado izquierdo de una asignación.");}
break;
case 109:
//#line 499 "grammar.y"
{yyval = new ParserVal(val_peek(2).sval + "." + val_peek(0).sval);}
break;
case 112:
//#line 506 "grammar.y"
{yyval = new ParserVal(val_peek(0).sval);}
break;
case 113:
//#line 507 "grammar.y"
{Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una operacion logica."); yyval = new ParserVal(tercetos.add("==", val_peek(2).sval, val_peek(0).sval, tercetos.typeTerceto(val_peek(2).sval, val_peek(0).sval)));}
break;
case 114:
//#line 508 "grammar.y"
{Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una operacion logica."); yyval = new ParserVal(tercetos.add("!!", val_peek(2).sval, val_peek(0).sval, tercetos.typeTerceto(val_peek(2).sval, val_peek(0).sval)));}
break;
case 115:
//#line 511 "grammar.y"
{yyval = new ParserVal(val_peek(0).sval);}
break;
case 116:
//#line 512 "grammar.y"
{Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una operacion logica."); yyval = new ParserVal(tercetos.add("<", val_peek(2).sval, val_peek(0).sval, tercetos.typeTerceto(val_peek(2).sval, val_peek(0).sval)));}
break;
case 117:
//#line 513 "grammar.y"
{Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una operacion logica."); yyval = new ParserVal(tercetos.add(">", val_peek(2).sval, val_peek(0).sval, tercetos.typeTerceto(val_peek(2).sval, val_peek(0).sval)));}
break;
case 118:
//#line 514 "grammar.y"
{Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una operacion logica."); yyval = new ParserVal(tercetos.add(">=", val_peek(2).sval, val_peek(0).sval, tercetos.typeTerceto(val_peek(2).sval, val_peek(0).sval)));}
break;
case 119:
//#line 515 "grammar.y"
{Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una operacion logica."); yyval = new ParserVal(tercetos.add("<=", val_peek(2).sval, val_peek(0).sval, tercetos.typeTerceto(val_peek(2).sval, val_peek(0).sval)));}
break;
case 120:
//#line 518 "grammar.y"
{yyval = new ParserVal(val_peek(0).sval);}
break;
case 121:
//#line 521 "grammar.y"
{yyval = new ParserVal(val_peek(0).sval); Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una operacion aritmetica.");}
break;
case 122:
//#line 522 "grammar.y"
{yyval = new ParserVal(tercetos.add("+", val_peek(2).sval, val_peek(0).sval, tercetos.typeTerceto(val_peek(2).sval, val_peek(0).sval)));}
break;
case 123:
//#line 523 "grammar.y"
{yyval = new ParserVal(tercetos.add("-", val_peek(2).sval, val_peek(0).sval, tercetos.typeTerceto(val_peek(2).sval, val_peek(0).sval)));}
break;
case 124:
//#line 526 "grammar.y"
{yyval = new ParserVal(val_peek(0).sval);}
break;
case 125:
//#line 527 "grammar.y"
{yyval = new ParserVal(tercetos.add("*", val_peek(2).sval, val_peek(0).sval, tercetos.typeTerceto(val_peek(2).sval, val_peek(0).sval)));}
break;
case 126:
//#line 528 "grammar.y"
{yyval = new ParserVal(tercetos.add("/", val_peek(2).sval, val_peek(0).sval, tercetos.typeTerceto(val_peek(2).sval, val_peek(0).sval)));}
break;
case 127:
//#line 529 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "El operator % no es valido.");}
break;
case 130:
//#line 534 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No se puede invocar un metodo/funcion en una expresion.");}
break;
case 132:
//#line 536 "grammar.y"
{
                    if (tercetos.hasNestingExpressions(val_peek(1).sval)) 
                      Logger.logError(aLexico.getProgramPosition(), "No se permite el anidamiento de expresiones.");
                    yyval = new ParserVal(val_peek(1).sval);  
                 }
break;
case 133:
//#line 541 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Termino vacio.");}
break;
case 134:
//#line 544 "grammar.y"
{
                          yyval = new ParserVal(tercetos.add("TOD", val_peek(1).sval, "-"));
                          tercetos.TODtracking(yyval.sval);
                          Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una conversion explicita.");
                      }
break;
case 135:
//#line 549 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No se puede convertir la expresion declarada.");}
break;
case 136:
//#line 550 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "El metodo TOD debe estar delimitado por parentesis \"(...)\".");}
break;
case 137:
//#line 551 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "El metodo TOD debe estar delimitado por parentesis \"(...)\".");}
break;
case 138:
//#line 552 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Es necesario pasar una expresion aritmetica.");}
break;
case 139:
//#line 553 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "TOD es un operador unario, es necesario pasarle una expresion entre parentesis.");}
break;
case 140:
//#line 556 "grammar.y"
{yyval = new ParserVal(val_peek(0).sval); }
break;
case 141:
//#line 557 "grammar.y"
{yyval = new ParserVal(val_peek(0).sval);}
break;
case 142:
//#line 558 "grammar.y"
{yyval = new ParserVal(TablaTipos.chequearRangoLong(val_peek(0).sval, aLexico.getProgramPosition()));}
break;
case 143:
//#line 559 "grammar.y"
{ yyval = new ParserVal(TablaTipos.negarDouble(val_peek(0).sval));}
break;
case 144:
//#line 560 "grammar.y"
{
              if(!TablaTipos.chequearRangoLongNegativo(val_peek(0).sval)){
                  Logger.logWarning(aLexico.getProgramPosition(),"LONG NEGATIVO FUERA DE RANGO SE TRUNCA AL MINIMO PERMITIDO");
                  yyval = new ParserVal(TablaTipos.negarLong("2147483648"));
              } else{
                  yyval = new ParserVal(TablaTipos.negarLong(val_peek(0).sval));
              }
       }
break;
case 145:
//#line 568 "grammar.y"
{Logger.logError(aLexico.getProgramPosition() ,"Los tipos UINT deben ser sin signo."); yyval = new ParserVal(val_peek(0).sval);}
break;
case 146:
//#line 571 "grammar.y"
{
                String ref = val_peek(3).sval;

                if ( !ref.isEmpty() ){
                  yyval = new ParserVal(ref);
                  
                  if (!tercetos.linkFunction(ref, val_peek(1).sval))
                    Logger.logError(aLexico.getProgramPosition(), "La funcion a invocar no posee parametro formal.");
                  else
                    Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una invocacion a una funcion, con pj de parametro.");
                } 
            }
break;
case 147:
//#line 583 "grammar.y"
{
                String ref = val_peek(2).sval;

                if (!ref.isEmpty()){
                  yyval = new ParserVal(ref);
                  
                  if (!tercetos.linkFunction(ref))
                    Logger.logError(aLexico.getProgramPosition(), "La funcion a invocar no posee parametro formal.");
                  else
                    Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una invocacion a una funcion, con pj de parametro.");
                } 
            }
break;
case 148:
//#line 595 "grammar.y"
{
                String ref = val_peek(3).sval;

                if ( !ref.isEmpty() ){
                  yyval = new ParserVal(ref);
                  
                  if (!tercetos.linkMethod(ref, val_peek(1).sval, scope.getCurrentScope()))
                    Logger.logError(aLexico.getProgramPosition(), "La funcion a invocar no posee parametro formal.");
                  else
                    Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una invocacion a una funcion, con pj de parametro.");
                } 
            }
break;
case 149:
//#line 607 "grammar.y"
{
                String ref = val_peek(2).sval;

                if (!ref.isEmpty()){
                  yyval = new ParserVal(ref);
                  
                  if (!tercetos.linkMethod(ref, scope.getCurrentScope()))
                    Logger.logError(aLexico.getProgramPosition(), "La funcion a invocar no posee parametro formal.");
                  else
                    Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una invocacion a una funcion, con pj de parametro.");
                } 
            }
break;
case 150:
//#line 619 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Solo se permite el pasaje de un parametro real.");}
break;
case 151:
//#line 620 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Solo se permite el pasaje de un parametro real.");}
break;
case 152:
//#line 621 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Solo se permite el pasaje de un parametro real.");}
break;
case 153:
//#line 622 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Solo se permite el pasaje de un parametro real.");}
break;
case 159:
//#line 641 "grammar.y"
{yyval = new ParserVal("UINT");}
break;
case 160:
//#line 642 "grammar.y"
{yyval = new ParserVal("LONG");}
break;
case 161:
//#line 645 "grammar.y"
{yyval = new ParserVal("DOUBLE");}
break;
case 162:
//#line 649 "grammar.y"
{
                        String reference = scope.searchInterface(val_peek(0).sval);
                        if (reference == null) {
                          yyval = new ParserVal("");
                          Logger.logError(aLexico.getProgramPosition(), "La interface " + val_peek(0).sval + " no esta al alcance.");
                        } else {
                          yyval = new ParserVal(val_peek(0).sval);
                        }
                    }
break;
case 163:
//#line 660 "grammar.y"
{
              String reference = scope.searchClass(val_peek(0).sval);

              if (reference == null) {
                Logger.logError(aLexico.getProgramPosition(), "La clase " + val_peek(0).sval + " no esta al alcance.");
                yyval = new ParserVal("");
              } else {
                yyval = new ParserVal(val_peek(0).sval);
              }
            }
break;
case 164:
//#line 672 "grammar.y"
{
                    String reference = scope.searchClass(val_peek(0).sval);
                    /*Revisar esto*/
                    if (reference == null) {
                      Logger.logError(aLexico.getProgramPosition(), "La clase " + val_peek(0).sval + " no esta al alcance.");
                      yyval = new ParserVal("");
                    } else {
                      scope.stack(val_peek(0).sval);
                      yyval = new ParserVal(reference);
                    }
                  }
break;
case 165:
//#line 686 "grammar.y"
{
                      String reference = scope.searchFunc(val_peek(0).sval);

                      if(reference == null) {
                        Logger.logError(aLexico.getProgramPosition(), "La funcion " + val_peek(0).sval + " no esta al alcance.");
                        yyval = new ParserVal("");
                      }
                      else
                        yyval = new ParserVal(reference);
               }
break;
case 166:
//#line 698 "grammar.y"
{
                    String instance = TablaClases.getInstance(val_peek(0).sval);
                    String instance_s = scope.searchInstance(instance);

                    if (instance_s != null) {
                      String reference = TablaClases.searchMethod(val_peek(0).sval, scope.getAmbito(instance_s));

                      if(reference == null) {
                        Logger.logError(aLexico.getProgramPosition(), "El metodo " + val_peek(0).sval + " no esta al alcance.");
                        yyval = new ParserVal("");
                      } else
                        yyval = new ParserVal(reference);
                    } else {
                        Logger.logError(aLexico.getProgramPosition(), "La instancia " + instance + " no esta al alcance.");
                        yyval = new ParserVal("");
                    }
               }
break;
case 167:
//#line 718 "grammar.y"
{
                    String reference = scope.searchVar(val_peek(0).sval);
                    if(reference == null) {
                      Logger.logError(aLexico.getProgramPosition(), "La variable " + val_peek(0).sval + " no esta al alcance.");
                      yyval = new ParserVal("");
                    }
                    else
                      yyval = new ParserVal(reference);
               }
break;
case 168:
//#line 734 "grammar.y"
{tercetos.addReturn();}
break;
case 169:
//#line 735 "grammar.y"
{tercetos.addReturn(); Logger.logWarning(aLexico.getProgramPosition(), "Se esta declarando un bloque sin utilizar luego de un RETURN.");}
break;
case 170:
//#line 736 "grammar.y"
{tercetos.addReturn();}
break;
case 171:
//#line 737 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Se esperaba una ',' luego del RETURN");}
break;
case 172:
//#line 738 "grammar.y"
{tercetos.addReturn(); Logger.logWarning(aLexico.getProgramPosition(), "Se esta declarando un bloque sin utilizar luego de un RETURN");}
break;
case 173:
//#line 739 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Es necesario declarar el retorno del bloque.");}
break;
case 174:
//#line 740 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Un bloque debe estar delimitado por llaves \"{...} y es necesario declarar el retorno del bloque.");}
break;
case 175:
//#line 741 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Un bloque debe estar delimitado por llaves \"{...}\".");}
break;
case 176:
//#line 742 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Es necesario declarar el retorno del bloque.");}
break;
case 177:
//#line 743 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Un bloque debe estar delimitado por llaves \"{...}\".");}
break;
case 180:
//#line 748 "grammar.y"
{tercetos.addReturn(); Logger.logWarning(aLexico.getProgramPosition(), "Se esta declarando un bloque sin utilizar luego de un RETURN");}
break;
case 181:
//#line 749 "grammar.y"
{tercetos.addReturn(); Logger.logWarning(aLexico.getProgramPosition(), "Se esta declarando un bloque sin utilizar luego de un RETURN");}
break;
case 182:
//#line 750 "grammar.y"
{tercetos.addReturn();}
break;
case 183:
//#line 751 "grammar.y"
{tercetos.addReturn();}
break;
case 184:
//#line 753 "grammar.y"
{Logger.logWarning(aLexico.getProgramPosition(), "Se esta declarando un bloque sin utilizar luego de un RETURN");}
break;
case 197:
//#line 774 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No se permite declarar una clase en un bloque ejecutable.");}
break;
case 198:
//#line 775 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No se permite declarar una interface en un bloque ejecutable.");}
break;
case 199:
//#line 776 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No se permite declarar un impl for en un bloque ejecutable.");}
break;
case 200:
//#line 777 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No se permiten sentencias declarativas en un bloque ejecutable.");}
break;
case 201:
//#line 780 "grammar.y"
{
                              if (!(val_peek(2).sval.isEmpty() || val_peek(1).sval.isEmpty())) {
                                TablaSimbolos.addTipoVariable(val_peek(2).sval, val_peek(1).sval);                      

                                if (TablaSimbolos.isClass(val_peek(2).sval + Scope.getScopeMain())) {
                                  TablaClases.addInstancia(val_peek(2).sval, val_peek(1).sval);
                                  TablaSimbolos.addUsoInstancia(val_peek(1).sval);
                                } else
                                  TablaSimbolos.addUsedVariables(val_peek(1).sval);
                                Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una declaracion de variable local.");
                              } 
                            }
break;
case 212:
//#line 810 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Se esperaba una \',\' en el final de la sentencia.");}
break;
case 216:
//#line 821 "grammar.y"
{
                         tercetos.backPatching(0);
                         tercetos.addLabel();
                    }
break;
case 217:
//#line 825 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "La sentencia de control IF debe terminar con ','.");}
break;
case 218:
//#line 826 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "La sentencia de control IF debe terminar con la palabra reservada END_IF.");}
break;
case 219:
//#line 827 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "La sentencia de control IF debe terminar con la palabra reservada END_IF y con finalizar con ','.");}
break;
case 220:
//#line 828 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "La sentencia de control IF debe terminar con ','.");}
break;
case 221:
//#line 829 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "La sentencia de control IF debe terminar con ','.");}
break;
case 222:
//#line 832 "grammar.y"
{tercetos.addCondBranch(val_peek(1).sval);}
break;
case 223:
//#line 833 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "La condicion de la sentencia de control IF no es correcta.");}
break;
case 224:
//#line 834 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "La condicion debe estar delimitado por parentesis \"(...)\".");}
break;
case 228:
//#line 842 "grammar.y"
{
                            Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una sentencia IF ELSE.");
                            tercetos.backPatching(0);
                            tercetos.addLabel();
                          }
break;
case 229:
//#line 847 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "La sentencia de control IF ELSE debe terminar con la palabra reservada END_IF.");}
break;
case 230:
//#line 848 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "La sentencia de control IF ELSE debe terminar con ','.");}
break;
case 231:
//#line 849 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "La sentencia de control IF ELSE debe terminar con la palabra reservada END_IF y con finalizar con ','.");}
break;
case 232:
//#line 850 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "La sentencia de control IF ELSE debe terminar con ','.");}
break;
case 233:
//#line 851 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "La sentencia de control IF ELSE debe terminar con ','.");}
break;
case 234:
//#line 854 "grammar.y"
{tercetos.backPatching(1); tercetos.addUncondBranch(); tercetos.addLabel();}
break;
case 235:
//#line 855 "grammar.y"
{tercetos.backPatching(1); tercetos.addUncondBranch(); tercetos.addLabel();}
break;
case 239:
//#line 865 "grammar.y"
{
                          if (!(val_peek(4).sval.isEmpty() || val_peek(2).sval.isEmpty())){
                            tercetos.add("+", val_peek(4).sval, "-");
                            tercetos.backPatching();
                            tercetos.stack();
                            tercetos.add("=", val_peek(4).sval, yyval.sval);
                            tercetos.backPatching();
                            tercetos.addUncondBranch(false);
                            tercetos.backPatching(0); /*Agrego el salto del CB*/
                            tercetos.backPatching(); /*Agrego el salgo del UB*/
                            tercetos.addLabel();
                          } else
                            yyval = new ParserVal("");

                         }
break;
case 240:
//#line 882 "grammar.y"
{
                               if (!val_peek(0).sval.isEmpty()) {
                                yyval = new ParserVal(val_peek(0).sval);
                                tercetos.add("=", val_peek(0).sval, "-");
                                tercetos.stack(val_peek(0).sval);
                                tercetos.stack();
                               }
                         }
break;
case 241:
//#line 890 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Error en la signatura del FOR IN RANGE.");}
break;
case 242:
//#line 895 "grammar.y"
{
                      String msj = TablaTipos.checkTypeCondition(val_peek(5).sval, val_peek(3).sval, val_peek(1).sval);

                      if (!msj.isEmpty()) {
                        Logger.logError(aLexico.getProgramPosition(), msj);
                        yyval = new ParserVal("");
                      } else {
                        tercetos.backPatching(val_peek(5).sval);
                        String ref = tercetos.addLabel();
                        yyval = new ParserVal(tercetos.add(tercetos.getComparator(val_peek(1).sval), val_peek(3).sval, "-"));
                        tercetos.backPatching();
                        tercetos.stack(ref);
                        tercetos.addCondBranch(yyval.sval);
                        tercetos.stack("+" + val_peek(1).sval);
                      }
                  }
break;
case 243:
//#line 911 "grammar.y"
{yyval = new ParserVal(""); Logger.logError(aLexico.getProgramPosition(), "Las constantes de actualizacion deben estar separadas por ';'.");}
break;
case 244:
//#line 912 "grammar.y"
{yyval = new ParserVal(""); Logger.logError(aLexico.getProgramPosition(), "La condicion del FOR IN RANGE debe estar delimitada por parentesis '(...)'.");}
break;
case 250:
//#line 928 "grammar.y"
{
                        if (!val_peek(1).sval.isEmpty())
                          scope.deleteLastScope();
                      }
break;
case 252:
//#line 935 "grammar.y"
{yyval = new ParserVal(""); Logger.logError(aLexico.getProgramPosition(), "Es necesario definir el cuerpo de la funcion.");}
break;
case 253:
//#line 938 "grammar.y"
{tercetos.add("PRINT", val_peek(1).sval, "[-]");}
break;
case 254:
//#line 939 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Se esperaba una \',\' en el final de la sentencia.");}
break;
case 255:
//#line 940 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Se esperaba una \',\' en el final de la sentencia.");}
break;
case 256:
//#line 941 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Solo se permite imprimir variables del tipo CADENA.");}
break;
case 257:
//#line 942 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Solo se permite imprimir variables del tipo CADENA.");}
break;
case 258:
//#line 943 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Solo se permite imprimir variables del tipo CADENA.");}
break;
case 259:
//#line 944 "grammar.y"
{tercetos.add("PRINT", "", "[-]");}
break;
case 260:
//#line 945 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Se esperaba un % que cierre la cadena.");}
break;
//#line 2396 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
