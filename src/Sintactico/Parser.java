//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";



package Sintactico;



//#line 2 "grammar.y"
import java.util.Collections;
import java.util.Scanner;
import java.io.IOException;
import java.util.ArrayList;
import java.io.File;

import Lexico.AnalizadorLexico;

import GCodigo.Tercetos;
import GCodigo.Terceto;
import GCodigo.Scope;

import GAssembler.GeneradorAssembler;

import Tools.Logger;
import Tools.Tupla;
import Tools.TablaSimbolos;
import Tools.TablaTipos;
import Tools.TablaClases;
//#line 37 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short CLASS=257;
public final static short INTERFACE=258;
public final static short IMPLEMENT=259;
public final static short RETURN=260;
public final static short IF=261;
public final static short ELSE=262;
public final static short END_IF=263;
public final static short FOR=264;
public final static short IN=265;
public final static short RANGE=266;
public final static short IMPL=267;
public final static short PRINT=268;
public final static short TOD=269;
public final static short EQUAL_OPERATOR=270;
public final static short NOT_EQUAL_OPERATOR=271;
public final static short GREATER_THAN_OR_EQUAL_OPERATOR=272;
public final static short LESS_THAN_OR_EQUAL_OPERATOR=273;
public final static short MINUS_ASSIGN=274;
public final static short VOID=275;
public final static short LONG=276;
public final static short UINT=277;
public final static short DOUBLE=278;
public final static short CADENA=279;
public final static short ID=280;
public final static short CTE_DOUBLE=281;
public final static short CTE_UINT=282;
public final static short CTE_LONG=283;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    1,    1,    2,    2,    2,
    2,    3,    3,    7,    8,    8,    8,    8,   10,   10,
   11,   12,   12,   12,   13,   13,   17,   17,   18,   18,
   18,   18,   18,   18,   19,   20,   14,   14,   22,   22,
   24,   25,   25,   25,   25,   26,   23,   23,   27,   29,
   29,   15,   15,   15,    9,   31,   31,   31,    4,   33,
   34,   34,   34,   34,   35,   35,   36,   36,   36,   37,
   37,   38,   38,   40,   39,   39,   39,    5,    5,    5,
    5,   42,   42,   42,   42,   44,   44,   45,   45,   45,
   46,   46,   47,   47,   47,   47,   49,   48,   50,   50,
   50,   50,   50,   50,   50,   51,   51,   51,   55,   56,
   56,   57,   57,   57,   58,   58,   58,   58,   58,   21,
   59,   59,   59,   60,   60,   60,   60,   61,   61,   61,
   61,   61,   61,   62,   62,   62,   62,   62,   62,   54,
   54,   54,   54,   54,   54,   53,   53,   53,   53,   53,
   53,   53,   53,   16,   16,   65,   66,   66,   67,   67,
   68,   32,   30,   41,   63,   64,   52,   28,   28,   28,
   28,   28,   28,   28,   28,   28,   28,   70,   70,   70,
   70,   70,   72,   70,   69,   69,   71,   71,    6,    6,
   73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
   74,   75,   75,   75,   75,   75,   75,   81,   81,   81,
   80,   80,   83,   83,   43,   76,   76,   76,   76,   76,
   76,   84,   84,   84,   84,   85,   85,   77,   77,   77,
   77,   77,   77,   87,   87,   88,   88,   86,   78,   89,
   89,   90,   90,   90,   91,   91,   92,   94,   93,   82,
   95,   95,   79,   79,   79,   79,   79,   79,   79,   79,
};
final static short yylen[] = {                            2,
    3,    2,    0,    2,    1,    1,    2,    1,    1,    1,
    1,    3,    4,    1,    3,    2,    3,    2,    1,    2,
    1,    1,    1,    1,    3,    2,    1,    3,    1,    3,
    3,    3,    3,    3,    1,    1,    3,    2,    2,    2,
    1,    4,    3,    5,    4,    1,    1,    1,    2,    1,
    2,    2,    4,    4,    2,    1,    3,    3,    3,    1,
    3,    3,    2,    2,    1,    2,    1,    1,    1,    2,
    3,    1,    1,    3,    3,    2,    3,    5,    5,    6,
    4,    3,    2,    3,    2,    1,    2,    2,    2,    2,
    2,    2,    4,    3,    5,    4,    2,    1,    3,    3,
    3,    3,    3,    3,    3,    1,    1,    1,    3,    1,
    1,    1,    3,    3,    1,    3,    3,    3,    3,    1,
    1,    3,    3,    1,    3,    3,    3,    1,    1,    1,
    1,    3,    2,    4,    4,    4,    3,    3,    1,    1,
    1,    1,    2,    2,    2,    4,    3,    4,    3,    5,
    4,    5,    4,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    5,    6,    4,
    3,    5,    3,    5,    4,    2,    2,    3,    2,    5,
    6,    4,    0,    6,    1,    2,    1,    2,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    2,    2,    1,    1,    1,    5,    5,    4,    4,    6,
    5,    3,    3,    3,    2,    1,    1,    5,    4,    5,
    4,    6,    5,    1,    1,    1,    1,    3,    6,    1,
    2,    7,    7,    4,    1,    1,    1,    1,    1,    2,
    1,    1,    3,    3,    3,    3,    3,    3,    2,    2,
};
final static short yydefred[] = {                         0,
    5,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   41,  160,  159,  161,    0,  140,  141,  142,    0,    0,
    2,    0,  215,    0,    6,    8,    9,   10,   11,    0,
    0,    0,  208,  155,  209,  213,    0,  106,    0,  108,
    0,    0,    0,    0,  154,  156,  157,  158,  189,  190,
  203,  204,  205,  207,  210,  202,  206,    0,    4,   14,
    0,   60,    0,    0,    0,    0,    0,  110,  240,  111,
    0,    0,    0,    0,  259,  260,    0,    0,    0,  143,
  145,  144,    0,  176,  185,    0,    0,  177,    0,    1,
    7,    0,    0,   27,    0,   40,    0,  252,  251,  250,
   46,   39,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  211,  212,    0,    0,    0,   12,
    0,    0,    0,   59,    0,    0,  129,  130,  128,    0,
    0,    0,    0,  124,  131,    0,  225,    0,    0,  197,
  198,  199,    0,  196,    0,    0,  200,  191,  192,  193,
  194,  195,    0,    0,    0,  241,    0,    0,  164,    0,
  254,  253,  255,  258,  256,  257,  171,    0,    0,  173,
  186,    0,    0,  201,    0,    0,    0,    0,    0,    0,
    0,    0,  101,    0,  102,  103,  105,  104,  100,   99,
  109,    0,  147,    0,   50,    0,    0,  149,    0,  162,
    0,   56,  163,   16,    0,   19,   21,   22,   23,   24,
    0,    0,    0,   18,    0,   13,   63,   69,    0,    0,
    0,   65,   67,   68,   72,   73,   64,    0,    0,    0,
  133,    0,    0,    0,  224,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  223,  222,    0,  179,    0,  187,
   35,    0,    0,  218,  219,    0,    0,  229,  231,    0,
    0,    0,    0,    0,    0,   81,  170,    0,    0,  175,
    0,   28,   31,   36,   32,   34,   33,   30,    0,   43,
    0,    0,  151,   51,    0,  146,  153,    0,  148,    0,
    0,   15,   20,    0,   48,    0,   47,    0,    0,   17,
    0,    0,   61,   66,   62,    0,  137,    0,  138,    0,
  132,    0,    0,    0,    0,    0,    0,    0,    0,  125,
  126,  127,    0,    0,  178,  188,  221,    0,  216,  217,
  233,    0,  228,  230,  237,  236,  238,    0,    0,    0,
    0,   83,    0,    0,    0,   86,    0,   85,    0,   78,
   79,  172,  168,    0,  174,   45,   49,    0,   42,  150,
  152,   58,   57,   25,   37,    0,    0,   71,   75,   77,
   74,  136,  135,  134,  182,    0,    0,  220,  232,  247,
    0,    0,  245,  246,  239,   80,   98,   92,    0,   91,
   82,   87,   89,   90,   88,   84,  169,   44,   54,   53,
  183,  180,    0,    0,    0,    0,    0,    0,  184,  181,
  244,  249,    0,    0,    0,   94,    0,    0,    0,    0,
    0,   96,    0,    0,   93,  248,    0,    0,   95,  243,
  242,
};
final static short yydgoto[] = {                          4,
   24,   25,  140,  141,  142,   85,   61,  120,  121,  205,
  206,  207,  208,  209,  210,   30,   93,   94,   95,  273,
  274,   31,  296,   32,   96,   97,  282,   33,  196,   34,
  201,  202,   63,  124,  221,  222,  223,  224,  225,  226,
  160,  266,   35,  345,  346,  347,  388,  389,  419,   36,
   37,  127,  128,  129,   41,   42,  130,  131,  184,  133,
  134,  135,   43,   44,   45,   46,   47,   48,   86,  145,
  249,  409,  250,   49,   50,   51,   52,   53,   54,   55,
   56,   57,   58,   66,  153,  154,  155,  337,   71,  340,
  385,  381,  413,  427,  100,
};
final static short yysindex[] = {                       -12,
    0,  488,   52,    0, -231, -176,   23, -136, -143,   82,
    0,    0,    0,    0,    0,    0,    0,    0,  205,  548,
    0,  574,    0,  524,    0,    0,    0,    0,    0, -107,
   54,  -96,    0,    0,    0,    0,  927,    0,    0,    0,
    0,  145,   66,   69,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   17,    0,    0,
    6,    0,   72,  290,  233, 1028,   -3,    0,    0,    0,
   10,  -86,   13,    0,    0,    0,  196,  238,  110,    0,
    0,    0,   34,    0,    0,  625,  259,    0,  656,    0,
    0,    0,   96,    0,  -54,    0,   74,    0,    0,    0,
    0,    0,  290,  290,  290,  290,  290,  290,  290,   22,
   30,  353,   51,  800,    0,    0,   47,  728,  242,    0,
   83,  950,  300,    0,  103,  162,    0,    0,    0, -110,
  -43,  165,  286,    0,    0,  269,    0,  -38,  898,    0,
    0,    0,   78,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   90,  547,   67,    0,   58,  274,    0,    7,
    0,    0,    0,    0,    0,    0,    0,  688,  305,    0,
    0,  328,  332,    0,   78,  290,  290,  290,  290,  290,
  122,  -27,    0,  165,    0,    0,    0,    0,    0,    0,
    0,  266,    0,   78,    0,  -32,  267,    0,    1,    0,
  106,    0,    0,    0, 1110,    0,    0,    0,    0,    0,
 -107,   91,  108,    0,  319,    0,    0,    0,   78,  -96,
 1168,    0,    0,    0,    0,    0,    0,  375,  -94,  818,
    0,  366,  290,  290,    0,  290,  290,  290,  290,  290,
  290,  290,  290,  290,    0,    0,  373,    0, 1001,    0,
    0,  299,   24,    0,    0,  308,   36,    0,    0, 1028,
  105,  141, 1193,  382,  138,    0,    0,  714,  749,    0,
  396,    0,    0,    0,    0,    0,    0,    0,  321,    0,
   78,   21,    0,    0,  407,    0,    0,  410,    0,   47,
   47,    0,    0,  256,    0,  414,    0,  204,  208,    0,
  272,   57,    0,    0,    0,  336,    0,  422,    0,  425,
    0,  -43,  -43,  165,  165,  165,  165,  286,  286,    0,
    0,    0, 1059,  423,    0,    0,    0,  344,    0,    0,
    0,  345,    0,    0,    0,    0,    0,    8,    8, 1028,
  432,    0,  197,  197, 1203,    0,   63,    0,  591,    0,
    0,    0,    0,  774,    0,    0,    0,  451,    0,    0,
    0,    0,    0,    0,    0,  435,  452,    0,    0,    0,
    0,    0,    0,    0,    0, 1089, 1116,    0,    0,    0,
  239,  324,    0,    0,    0,    0,    0,    0,  171,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1145,  374,    8,    8,  247,  258,    0,    0,
    0,    0,  460,  453,  385,    0,  241,  271,  484,    8,
    8,    0,    0,  489,    0,    0,  490,  498,    0,    0,
    0,
};
final static short yyrindex[] = {                       529,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  504,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1088,    0,
  368,  412,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  438,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  835,    0,    0, 1162,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  464,    0,    0,    0,    0,    0,
  -35,  820,  868,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  178,  833,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1178,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  173,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  262,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  307,    0,  325,    0,  427,    0,    0,
  449,  842,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  -29,  -25, 1002, 1204, 1239, 1253,  940,  977,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  284,    0,    0,    0,    0,    0,    0,    0,
    0,
};
final static short yygindex[] = {                         0,
    0,  519,  100,  166,  207,    2,    0,  437,    0,  429,
  185,    0,    0,    0,  -49,  -64, -181, -162,    0,  430,
 1381,  -67,    0,  -89,    5,    0,  152,   -7,  439,  -52,
    0, -255,    0,    0,  443, -142,    0,    0,    0,    0,
    0,  -50,  -26,  298, -268,    0,  223,    0,    0,    0,
    0,    3,   19,   -2,  571,  576,  516,  -13, 1226,   65,
  144,    0,    0,    0,    0,    0,    0,    0,  -21, -204,
 -278,    0,  -56,  -22,    0,   -6,   44,   49,   59,   62,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  251,  192,  183,    0,
};
final static int YYTABLESIZE=1611;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         40,
   89,  143,  246,   29,   38,  112,  180,   78,  286,  146,
   69,  113,  272,  280,  235,  114,  238,   40,  239,   40,
   39,   40,   38,   99,   38,   29,   38,    3,   77,  294,
  307,  284,  220,  220,  362,  363,  102,  301,   39,  144,
   39,  289,   39,  147,  376,  119,  264,  194,   60,  194,
  212,  212,   19,  211,  211,  335,  162,  219,  219,  148,
  115,  359,   65,   40,  265,  213,  213,  329,   38,  213,
  213,  163,  218,  218,  143,  116,  392,  168,  304,  333,
  392,   76,  330,   40,   39,  304,   40,  171,   38,  112,
  171,   38,   59,   22,  334,  113,   22,   98,  403,  114,
  369,   26,   22,   62,   39,  112,  393,   39,  114,  149,
    2,  123,  144,  182,  150,  370,  147,  281,  357,   67,
   72,  394,  119,   26,  151,   75,   19,  152,  118,  263,
   22,  220,  148,  254,  295,  383,   40,  212,  220,  174,
  211,   38,  230,   68,  339,   64,  268,  212,  255,  290,
  211,  298,  213,  166,  175,  110,  219,   39,  167,  233,
  234,  306,  213,  219,  291,   40,  299,   27,  213,  158,
   38,  218,   92,  344,  344,  213,   20,  264,  218,   20,
  264,   23,  149,  101,  143,   20,   39,  150,  111,   27,
  110,  113,  326,  159,  122,  143,  181,  151,  343,  343,
  152,  126,  231,  336,  297,  118,   19,  240,   28,  241,
  408,  341,   55,   20,  350,  176,  177,  178,  179,  312,
  313,  227,  144,  285,  302,  229,  147,  338,  236,  237,
   28,  233,  234,  144,  112,  112,  227,  147,  351,  164,
  113,  113,  148,    1,  114,  114,   40,  354,   12,   13,
   14,   38,  203,  148,  357,  344,  288,   40,  143,  344,
  263,  156,   38,  263,  117,   40,   40,   39,  161,  171,
   38,   38,  126,  137,  157,  143,  358,   19,   39,  328,
  343,  165,  214,  384,  343,  192,   39,   39,   16,   17,
   18,  332,  149,  407,  371,   55,  144,  150,  416,  364,
  147,  191,  172,  149,  318,  319,  197,  151,  150,  245,
  152,  143,  143,  144,  175,  368,  148,  147,  151,  326,
   40,  152,  244,  261,   97,   38,  200,  242,  260,  126,
  175,  262,  243,  148,   19,  380,  380,   40,  143,  395,
  227,   39,   38,  417,   35,  252,  326,   26,  269,  144,
  144,   40,  253,  147,  147,  171,   38,  251,   39,  300,
   73,   74,   16,   17,   18,   38,  149,  405,  270,  148,
  148,  150,   39,   40,   40,  271,  144,  279,   38,   38,
  147,  151,  406,  149,  152,  320,  321,  322,  150,  293,
  283,  287,  126,  193,   39,   39,  148,   19,  151,  293,
   40,  152,  412,  412,  111,   38,  311,  166,  111,  111,
  111,  111,  111,  111,  111,  305,  323,  426,  426,  149,
  149,   39,  348,  327,  150,  150,  111,  111,  111,  111,
  125,   26,  331,  227,  151,  151,  355,  152,  152,  235,
  227,   74,   16,   17,   18,  356,  149,  360,  167,   38,
  361,  150,  167,  167,  167,  167,  167,  365,  167,  366,
  372,  151,  373,  367,  152,  374,  377,   52,  378,  379,
  167,  167,  167,  167,  110,  386,  387,  165,  110,  110,
  110,  110,  110,  110,  110,   80,   81,   82,  136,   70,
  166,  398,  111,  399,  404,  400,  110,  110,  411,  110,
  139,  125,  415,  420,  139,  139,  139,  139,  139,  422,
  139,  421,   74,   16,   17,   18,   11,   12,   13,   14,
  423,  203,  139,  139,  425,  139,  424,   22,    3,  429,
  430,   23,   19,   12,   13,   14,  167,  203,  431,   35,
  110,  155,   91,  165,  110,  110,  110,  215,  110,  110,
  110,   52,  199,   35,   35,   35,   35,  216,  125,  418,
  165,  349,  110,   22,  110,  228,  390,   23,   19,   74,
   16,   17,   18,   70,   11,   12,   13,   14,   70,  203,
  138,   26,   26,   26,   26,   79,   26,   22,  139,  382,
  258,   23,   19,   11,   12,   13,   14,  414,  203,   38,
   38,   38,   38,  428,   38,  259,  275,  276,  277,  278,
   20,    0,   21,   22,   88,    0,    0,   23,   19,    0,
    0,  125,    0,  111,    0,    0,  165,    0,   12,   13,
   14,  396,   15,   16,   17,   18,    0,  111,  111,  111,
  111,  111,  111,  111,  111,  111,   20,  111,   90,   11,
   12,   13,   14,    0,  203,    0,   11,   12,   13,   14,
    0,  203,    0,    0,   22,    0,    0,  167,   23,   19,
   20,    0,   84,    0,    0,    0,  167,    0,    0,    0,
    0,  167,  167,  167,  167,  167,  167,  167,  167,  167,
    0,  167,    0,  110,    0,   22,   20,    0,    0,   23,
   19,   52,   52,   52,   52,    0,   52,  110,  110,  110,
  110,    0,  110,  110,  110,  110,    0,  110,    0,  139,
    0,    0,    0,   70,   70,   70,   70,   22,   70,    0,
    0,   23,   19,  139,  139,  139,  139,    0,  139,  139,
  139,  139,    0,  139,    5,    6,    0,   20,    7,  170,
    0,    8,    0,   22,    9,   10,    0,   23,   19,  110,
    0,    0,   11,   12,   13,   14,    0,   15,   16,   17,
   18,    0,    0,  110,  110,  110,  110,  110,   20,    0,
    5,    6,    0,  163,    7,    0,    0,    8,   22,    0,
    9,   10,   23,   19,    0,    0,    0,    0,   11,   12,
   13,   14,  256,   15,   16,   17,   18,   83,    7,  257,
   20,    8,  267,   22,    0,   10,    0,   23,   19,    0,
    0,    0,   11,   12,   13,   14,    0,   15,   16,   17,
   18,    0,    0,   87,    7,    0,   20,    8,  352,  126,
  198,   10,    0,    0,   19,    0,    0,    0,   11,   12,
   13,   14,  204,   15,   16,   17,   18,  126,  309,    0,
  115,    0,   19,    0,    0,   11,   12,   13,   14,    0,
  203,   20,    0,  353,   46,   35,  226,    0,   35,  115,
    0,  115,   76,    0,  169,    7,    0,    0,    8,    0,
    0,  226,   10,   35,    0,   35,   20,    0,  397,   11,
   12,   13,   14,    0,   15,   16,   17,   18,  121,    0,
  121,  121,  121,    0,    0,  173,    7,    0,    0,    8,
    0,    0,    0,   10,    0,    0,  121,  121,    0,  121,
   11,   12,   13,   14,    0,   15,   16,   17,   18,    0,
    0,   23,   19,    0,  115,    0,    0,    0,    7,    0,
    0,    8,    0,    0,    0,   10,    0,   46,    0,   35,
    0,    0,   11,   12,   13,   14,   76,   15,   16,   17,
   18,    0,    0,    0,    7,    0,    0,    8,    0,    0,
  122,   10,  122,  122,  122,    0,    0,  109,   11,   12,
   13,   14,  121,   15,   16,   17,   18,    0,  122,  122,
    0,  122,   11,   12,   13,   14,    0,  203,    0,    7,
    0,    0,    8,    0,    0,    0,   10,  123,    0,  123,
  123,  123,  248,   11,   12,   13,   14,    0,   15,   16,
   17,   18,    0,    0,    7,  123,  123,    8,  123,    0,
    0,   10,  118,    0,   23,   19,    0,    0,   11,   12,
   13,   14,    0,   15,   16,   17,   18,    0,    0,    0,
    0,  118,    0,  118,  122,    0,    0,    0,  125,    0,
    0,   23,   19,  308,  217,   12,   13,   14,    0,   15,
   16,   17,   18,    0,    0,    0,  125,    0,  226,  115,
  115,  115,  115,    0,  234,  226,    0,   74,   16,   17,
   18,  123,   23,   19,   35,   35,   35,   35,    0,   35,
   35,   35,   35,    0,   35,    0,   76,   76,   76,   76,
    0,   76,    0,  121,    0,  325,  118,    0,    0,    0,
    0,  214,   23,   19,    0,    0,    0,  121,  121,  121,
  121,    0,  121,  121,  121,  121,  214,  121,  107,    0,
  139,    0,    0,    0,    5,    6,    0,  247,    7,   23,
   19,    8,    0,    0,    9,   10,    0,    0,    0,    0,
    0,    0,    0,   12,   13,   14,    0,   15,   16,   17,
   18,    0,  103,  375,    0,    0,    0,    0,   23,   19,
    0,    0,    0,    0,    0,  122,  104,  105,  106,  107,
  108,    0,   29,    0,    0,   29,    0,    0,    0,  122,
  122,  122,  122,  401,  122,  122,  122,  122,  120,  122,
   29,  120,    0,    0,   11,   12,   13,   14,    0,  203,
    0,    0,  123,    0,  292,    0,  120,    0,    0,    0,
  402,    0,    0,    0,  119,    0,  123,  123,  123,  123,
    0,  123,  123,  123,  123,    0,  123,    5,    6,    0,
  324,    7,    0,  119,    8,  119,    0,    9,   10,  410,
    0,  118,  118,  118,  118,    0,   12,   13,   14,  116,
   15,   16,   17,   18,    5,    6,   29,    0,    7,  132,
  132,    8,  303,  117,    9,   10,    0,    0,  116,    0,
  116,    0,  120,   12,   13,   14,    0,   15,   16,   17,
   18,    0,  117,    0,  117,    5,    6,  342,    0,    7,
    0,    0,    8,    0,    0,    9,   10,  391,  119,    0,
    0,    0,    0,    0,   12,   13,   14,    0,   15,   16,
   17,   18,    0,  107,    0,    5,    6,    0,    0,    7,
    0,    0,    8,    0,    0,    9,   10,  107,  107,  107,
  107,  107,    0,  116,   12,   13,   14,    0,   15,   16,
   17,   18,    5,    6,    0,    0,    7,  117,    0,    8,
    0,    0,    9,   10,   11,   12,   13,   14,    0,  203,
    0,   12,   13,   14,    0,   15,   16,   17,   18,    0,
    0,    5,    6,    0,    0,    7,    0,    0,    8,    0,
    0,    9,   10,    0,    0,    0,    0,   29,    0,    0,
   12,   13,   14,    0,   15,   16,   17,   18,    0,    0,
    0,    0,    0,  120,    0,    0,   29,   29,   29,   29,
    0,   29,   11,   12,   13,   14,    0,  203,    0,    0,
    0,    0,  120,  120,  120,  120,    0,  120,  132,  132,
    0,  314,  315,  316,  317,    0,    0,   11,   12,   13,
   14,    0,  203,  119,  119,  119,  119,   11,   12,   13,
   14,    0,  203,  183,  185,  186,  187,  188,  189,  190,
    0,    0,  195,    0,  195,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  232,    0,  116,  116,
  116,  116,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  117,  117,  117,  117,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  310,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          2,
   22,   66,   41,    2,    2,   41,   61,   10,   41,   66,
    8,   41,  175,   41,  125,   41,   60,   20,   62,   22,
    2,   24,   20,   31,   22,   24,   24,   40,   10,  211,
  125,  194,  122,  123,  290,  291,   32,  219,   20,   66,
   22,   41,   24,   66,  323,   40,   40,  112,  280,  114,
  118,  119,   45,  118,  119,  260,   44,  122,  123,   66,
   44,   41,   40,   66,   58,  118,  119,   44,   66,  122,
  123,   59,  122,  123,  139,   59,  345,   44,  221,   44,
  349,    0,   59,   86,   66,  228,   89,   86,   86,  125,
   89,   89,   41,   40,   59,  125,   40,   44,  377,  125,
   44,    2,   40,  280,   86,   40,   44,   89,   40,   66,
  123,   40,  139,   40,   66,   59,  139,  182,  281,  256,
  264,   59,   40,   24,   66,   44,   45,   66,  123,  123,
   40,  221,  139,   44,   44,  340,  139,  205,  228,   44,
  205,  139,   40,  280,   40,  123,  168,  215,   59,   44,
  215,   44,  205,   44,   59,   46,  221,  139,  125,  270,
  271,  256,  215,  228,   59,  168,   59,    2,  221,  256,
  168,  221,  280,  263,  264,  228,  123,   40,  228,  123,
   40,   44,  139,  280,  249,  123,  168,  139,  123,   24,
   46,  123,  249,  280,  123,  260,  123,  139,  263,  264,
  139,   40,   41,  260,  212,  123,   45,   43,    2,   45,
   40,  262,   40,  123,  265,  270,  271,  272,  273,  233,
  234,   44,  249,  256,  220,  123,  249,  123,  272,  273,
   24,  270,  271,  260,  270,  271,   59,  260,  265,   44,
  270,  271,  249,  256,  270,  271,  249,  269,  276,  277,
  278,  249,  280,  260,  417,  345,  256,  260,  323,  349,
  123,  265,  260,  123,  259,  268,  269,  249,  256,  268,
  268,  269,   40,   41,  265,  340,  256,   45,  260,  256,
  345,   44,   41,  340,  349,  256,  268,  269,  281,  282,
  283,  256,  249,  123,  302,  123,  323,  249,   41,   44,
  323,  280,   44,  260,  240,  241,  256,  249,  260,   41,
  249,  376,  377,  340,   59,   44,  323,  340,  260,  376,
  323,  260,   37,  266,   41,  323,  280,   42,  262,   40,
   59,   58,   47,  340,   45,  338,  339,  340,  403,  347,
   41,  323,  340,  408,   61,  256,  403,   41,   44,  376,
  377,  354,  263,  376,  377,  354,  354,  280,  340,   41,
  279,  280,  281,  282,  283,   41,  323,   44,   41,  376,
  377,  323,  354,  376,  377,   44,  403,  256,  376,  377,
  403,  323,   59,  340,  323,  242,  243,  244,  340,  205,
  125,  125,   40,   41,  376,  377,  403,   45,  340,  215,
  403,  340,  405,  406,   37,  403,   41,   40,   41,   42,
   43,   44,   45,   46,   47,   41,   44,  420,  421,  376,
  377,  403,   41,  125,  376,  377,   59,   60,   61,   62,
  269,  125,  125,  256,  376,  377,   41,  376,  377,  262,
  263,  280,  281,  282,  283,  125,  403,   41,   37,  125,
   41,  403,   41,   42,   43,   44,   45,   44,   47,  256,
  125,  403,   41,  256,  403,   41,   44,   41,  125,  125,
   59,   60,   61,   62,   37,   44,  280,   40,   41,   42,
   43,   44,   45,   46,   47,  281,  282,  283,  256,   41,
  123,   41,  125,   59,  256,   44,   59,   60,  125,   62,
   37,  269,  256,   44,   41,   42,   43,   44,   45,  125,
   47,   59,  280,  281,  282,  283,  275,  276,  277,  278,
  280,  280,   59,   60,   41,   62,  256,   40,    0,   41,
   41,   44,   45,  276,  277,  278,  125,  280,   41,  256,
   37,  280,   24,   40,   41,   42,   43,  119,   45,   46,
   47,  125,  114,  270,  271,  272,  273,  121,  269,  408,
  123,  264,  125,   40,   61,  123,  344,   44,   45,  280,
  281,  282,  283,  125,  275,  276,  277,  278,    8,  280,
   65,  275,  276,  277,  278,   10,  280,   40,  125,  339,
   44,   44,   45,  275,  276,  277,  278,  406,  280,  275,
  276,  277,  278,  421,  280,   59,  177,  178,  179,  180,
  123,   -1,  125,   40,   41,   -1,   -1,   44,   45,   -1,
   -1,  269,   -1,  256,   -1,   -1,  123,   -1,  276,  277,
  278,   41,  280,  281,  282,  283,   -1,  270,  271,  272,
  273,  274,  275,  276,  277,  278,  123,  280,  125,  275,
  276,  277,  278,   -1,  280,   -1,  275,  276,  277,  278,
   -1,  280,   -1,   -1,   40,   -1,   -1,  256,   44,   45,
  123,   -1,  125,   -1,   -1,   -1,  265,   -1,   -1,   -1,
   -1,  270,  271,  272,  273,  274,  275,  276,  277,  278,
   -1,  280,   -1,  256,   -1,   40,  123,   -1,   -1,   44,
   45,  275,  276,  277,  278,   -1,  280,  270,  271,  272,
  273,   -1,  275,  276,  277,  278,   -1,  280,   -1,  256,
   -1,   -1,   -1,  275,  276,  277,  278,   40,  280,   -1,
   -1,   44,   45,  270,  271,  272,  273,   -1,  275,  276,
  277,  278,   -1,  280,  257,  258,   -1,  123,  261,  125,
   -1,  264,   -1,   40,  267,  268,   -1,   44,   45,  256,
   -1,   -1,  275,  276,  277,  278,   -1,  280,  281,  282,
  283,   -1,   -1,  270,  271,  272,  273,  274,  123,   -1,
  257,  258,   -1,  280,  261,   -1,   -1,  264,   40,   -1,
  267,  268,   44,   45,   -1,   -1,   -1,   -1,  275,  276,
  277,  278,  256,  280,  281,  282,  283,  260,  261,  263,
  123,  264,  125,   40,   -1,  268,   -1,   44,   45,   -1,
   -1,   -1,  275,  276,  277,  278,   -1,  280,  281,  282,
  283,   -1,   -1,  260,  261,   -1,  123,  264,  125,   40,
   41,  268,   -1,   -1,   45,   -1,   -1,   -1,  275,  276,
  277,  278,  125,  280,  281,  282,  283,   40,   41,   -1,
   41,   -1,   45,   -1,   -1,  275,  276,  277,  278,   -1,
  280,  123,   -1,  125,   40,   41,   44,   -1,   44,   60,
   -1,   62,   41,   -1,  260,  261,   -1,   -1,  264,   -1,
   -1,   59,  268,   59,   -1,   61,  123,   -1,  125,  275,
  276,  277,  278,   -1,  280,  281,  282,  283,   41,   -1,
   43,   44,   45,   -1,   -1,  260,  261,   -1,   -1,  264,
   -1,   -1,   -1,  268,   -1,   -1,   59,   60,   -1,   62,
  275,  276,  277,  278,   -1,  280,  281,  282,  283,   -1,
   -1,   44,   45,   -1,  125,   -1,   -1,   -1,  261,   -1,
   -1,  264,   -1,   -1,   -1,  268,   -1,  123,   -1,  125,
   -1,   -1,  275,  276,  277,  278,  125,  280,  281,  282,
  283,   -1,   -1,   -1,  261,   -1,   -1,  264,   -1,   -1,
   41,  268,   43,   44,   45,   -1,   -1,   61,  275,  276,
  277,  278,  125,  280,  281,  282,  283,   -1,   59,   60,
   -1,   62,  275,  276,  277,  278,   -1,  280,   -1,  261,
   -1,   -1,  264,   -1,   -1,   -1,  268,   41,   -1,   43,
   44,   45,  125,  275,  276,  277,  278,   -1,  280,  281,
  282,  283,   -1,   -1,  261,   59,   60,  264,   62,   -1,
   -1,  268,   41,   -1,   44,   45,   -1,   -1,  275,  276,
  277,  278,   -1,  280,  281,  282,  283,   -1,   -1,   -1,
   -1,   60,   -1,   62,  125,   -1,   -1,   -1,  269,   -1,
   -1,   44,   45,  256,  125,  276,  277,  278,   -1,  280,
  281,  282,  283,   -1,   -1,   -1,  269,   -1,  256,  270,
  271,  272,  273,   -1,  262,  263,   -1,  280,  281,  282,
  283,  125,   44,   45,  270,  271,  272,  273,   -1,  275,
  276,  277,  278,   -1,  280,   -1,  275,  276,  277,  278,
   -1,  280,   -1,  256,   -1,  125,  125,   -1,   -1,   -1,
   -1,   44,   44,   45,   -1,   -1,   -1,  270,  271,  272,
  273,   -1,  275,  276,  277,  278,   59,  280,   61,   -1,
  123,   -1,   -1,   -1,  257,  258,   -1,  260,  261,   44,
   45,  264,   -1,   -1,  267,  268,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  276,  277,  278,   -1,  280,  281,  282,
  283,   -1,  256,  125,   -1,   -1,   -1,   -1,   44,   45,
   -1,   -1,   -1,   -1,   -1,  256,  270,  271,  272,  273,
  274,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,  270,
  271,  272,  273,  125,  275,  276,  277,  278,   41,  280,
   59,   44,   -1,   -1,  275,  276,  277,  278,   -1,  280,
   -1,   -1,  256,   -1,  125,   -1,   59,   -1,   -1,   -1,
  125,   -1,   -1,   -1,   41,   -1,  270,  271,  272,  273,
   -1,  275,  276,  277,  278,   -1,  280,  257,  258,   -1,
  260,  261,   -1,   60,  264,   62,   -1,  267,  268,  125,
   -1,  270,  271,  272,  273,   -1,  276,  277,  278,   41,
  280,  281,  282,  283,  257,  258,  125,   -1,  261,   64,
   65,  264,  125,   41,  267,  268,   -1,   -1,   60,   -1,
   62,   -1,  125,  276,  277,  278,   -1,  280,  281,  282,
  283,   -1,   60,   -1,   62,  257,  258,  125,   -1,  261,
   -1,   -1,  264,   -1,   -1,  267,  268,  125,  125,   -1,
   -1,   -1,   -1,   -1,  276,  277,  278,   -1,  280,  281,
  282,  283,   -1,  256,   -1,  257,  258,   -1,   -1,  261,
   -1,   -1,  264,   -1,   -1,  267,  268,  270,  271,  272,
  273,  274,   -1,  125,  276,  277,  278,   -1,  280,  281,
  282,  283,  257,  258,   -1,   -1,  261,  125,   -1,  264,
   -1,   -1,  267,  268,  275,  276,  277,  278,   -1,  280,
   -1,  276,  277,  278,   -1,  280,  281,  282,  283,   -1,
   -1,  257,  258,   -1,   -1,  261,   -1,   -1,  264,   -1,
   -1,  267,  268,   -1,   -1,   -1,   -1,  256,   -1,   -1,
  276,  277,  278,   -1,  280,  281,  282,  283,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,  275,  276,  277,  278,
   -1,  280,  275,  276,  277,  278,   -1,  280,   -1,   -1,
   -1,   -1,  275,  276,  277,  278,   -1,  280,  233,  234,
   -1,  236,  237,  238,  239,   -1,   -1,  275,  276,  277,
  278,   -1,  280,  270,  271,  272,  273,  275,  276,  277,
  278,   -1,  280,  103,  104,  105,  106,  107,  108,  109,
   -1,   -1,  112,   -1,  114,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  126,   -1,  270,  271,
  272,  273,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  270,  271,  272,  273,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  230,
};
}
final static short YYFINAL=4;
final static short YYMAXTOKEN=283;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"'%'",null,null,"'('","')'","'*'","'+'",
"','","'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,"':'",
"';'","'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,"CLASS","INTERFACE","IMPLEMENT",
"RETURN","IF","ELSE","END_IF","FOR","IN","RANGE","IMPL","PRINT","TOD",
"EQUAL_OPERATOR","NOT_EQUAL_OPERATOR","GREATER_THAN_OR_EQUAL_OPERATOR",
"LESS_THAN_OR_EQUAL_OPERATOR","MINUS_ASSIGN","VOID","LONG","UINT","DOUBLE",
"CADENA","ID","CTE_DOUBLE","CTE_UINT","CTE_LONG",
};
final static String yyrule[] = {
"$accept : program",
"program : '{' type_declarations '}'",
"program : '{' '}'",
"program :",
"program : '(' ')'",
"program : error",
"type_declarations : type_declaration",
"type_declarations : type_declarations type_declaration",
"type_declaration : class_declaration",
"type_declaration : interface_declaration",
"type_declaration : implement_for_declaration",
"type_declaration : block_statement",
"class_declaration : CLASS class_name class_body",
"class_declaration : CLASS class_name interfaces class_body",
"class_name : ID",
"class_body : '{' class_body_declarations '}'",
"class_body : '{' '}'",
"class_body : '(' class_body_declarations ')'",
"class_body : '(' ')'",
"class_body_declarations : class_body_declaration",
"class_body_declarations : class_body_declarations class_body_declaration",
"class_body_declaration : class_member_declaration",
"class_member_declaration : field_declaration",
"class_member_declaration : method_declaration",
"class_member_declaration : inheritance_declaration",
"field_declaration : type variable_declarators ','",
"field_declaration : type variable_declarators",
"variable_declarators : variable_declarator",
"variable_declarators : variable_declarators ';' variable_declarator",
"variable_declarator : variable_declarator_id",
"variable_declarator : variable_declarator_id '=' variable_initializer",
"variable_declarator : variable_declarator_id EQUAL_OPERATOR variable_initializer",
"variable_declarator : variable_declarator_id NOT_EQUAL_OPERATOR variable_initializer",
"variable_declarator : variable_declarator_id LESS_THAN_OR_EQUAL_OPERATOR variable_initializer",
"variable_declarator : variable_declarator_id GREATER_THAN_OR_EQUAL_OPERATOR variable_initializer",
"variable_declarator_id : ID",
"variable_initializer : arithmetic_operation",
"method_declaration : method_header method_body ','",
"method_declaration : method_header method_body",
"method_header : result_type method_declarator",
"method_header : type method_declarator",
"result_type : VOID",
"method_declarator : method_name '(' formal_parameter ')'",
"method_declarator : method_name '(' ')'",
"method_declarator : method_name '(' formal_parameter error ')'",
"method_declarator : method_name '{' error '}'",
"method_name : ID",
"method_body : block",
"method_body : ','",
"formal_parameter : type variable_declarator",
"real_parameter : arithmetic_operation",
"real_parameter : type variable_declarator",
"inheritance_declaration : class_type ','",
"inheritance_declaration : class_type ';' error ','",
"inheritance_declaration : class_type ',' error ';'",
"interfaces : IMPLEMENT interface_type_list",
"interface_type_list : reference_interface",
"interface_type_list : interface_type_list ';' reference_interface",
"interface_type_list : interface_type_list ',' reference_interface",
"interface_declaration : INTERFACE interface_name interface_body",
"interface_name : ID",
"interface_body : '{' interface_member_declaration '}'",
"interface_body : '(' interface_member_declaration ')'",
"interface_body : '{' '}'",
"interface_body : '(' ')'",
"interface_member_declaration : interface_method_declaration",
"interface_member_declaration : interface_member_declaration interface_method_declaration",
"interface_method_declaration : constant_declaration",
"interface_method_declaration : abstract_method_declaration",
"interface_method_declaration : inheritance_declaration",
"constant_declaration : type variable_declarators",
"constant_declaration : type variable_declarators ','",
"abstract_method_declaration : abstract_method_header",
"abstract_method_declaration : abstract_method_header_with_block",
"abstract_method_header_with_block : result_type method_declarator block",
"abstract_method_header : result_type method_declarator ','",
"abstract_method_header : result_type method_declarator",
"abstract_method_header : result_type method_declarator ';'",
"implement_for_declaration : IMPL FOR reference_class ':' implement_for_body",
"implement_for_declaration : IMPL FOR reference_class ':' empty_statement",
"implement_for_declaration : IMPL FOR error ':' implement_for_body ','",
"implement_for_declaration : IMPL FOR reference_class implement_for_body",
"implement_for_body : '{' implement_for_body_declarations '}'",
"implement_for_body : '{' '}'",
"implement_for_body : '(' implement_for_body_declarations ')'",
"implement_for_body : '(' ')'",
"implement_for_body_declarations : implement_for_method_declaration",
"implement_for_body_declarations : implement_for_body_declarations implement_for_method_declaration",
"implement_for_method_declaration : impl_for_method_header block",
"implement_for_method_declaration : impl_for_method_header ','",
"implement_for_method_declaration : impl_for_method_header ';'",
"impl_for_method_header : result_type impl_for_method_declarator",
"impl_for_method_header : type impl_for_method_declarator",
"impl_for_method_declarator : impl_method_name '(' impl_formal_parameter ')'",
"impl_for_method_declarator : impl_method_name '(' ')'",
"impl_for_method_declarator : impl_method_name '(' formal_parameter error ')'",
"impl_for_method_declarator : impl_method_name '{' error '}'",
"impl_formal_parameter : type ID",
"impl_method_name : ID",
"assignment : left_hand_side '=' arithmetic_operation",
"assignment : left_hand_side MINUS_ASSIGN arithmetic_operation",
"assignment : left_hand_side error arithmetic_operation",
"assignment : left_hand_side EQUAL_OPERATOR arithmetic_operation",
"assignment : left_hand_side NOT_EQUAL_OPERATOR arithmetic_operation",
"assignment : left_hand_side LESS_THAN_OR_EQUAL_OPERATOR arithmetic_operation",
"assignment : left_hand_side GREATER_THAN_OR_EQUAL_OPERATOR arithmetic_operation",
"left_hand_side : reference_type",
"left_hand_side : invocation",
"left_hand_side : factor",
"field_acces : primary '.' ID",
"primary : ID",
"primary : field_acces",
"equality_expression : relational_expression",
"equality_expression : equality_expression EQUAL_OPERATOR relational_expression",
"equality_expression : equality_expression NOT_EQUAL_OPERATOR relational_expression",
"relational_expression : additive_expression",
"relational_expression : relational_expression '<' additive_expression",
"relational_expression : relational_expression '>' additive_expression",
"relational_expression : relational_expression GREATER_THAN_OR_EQUAL_OPERATOR additive_expression",
"relational_expression : relational_expression LESS_THAN_OR_EQUAL_OPERATOR additive_expression",
"arithmetic_operation : additive_expression",
"additive_expression : multiplicative_expression",
"additive_expression : additive_expression '+' multiplicative_expression",
"additive_expression : additive_expression '-' multiplicative_expression",
"multiplicative_expression : unary_expression",
"multiplicative_expression : multiplicative_expression '*' unary_expression",
"multiplicative_expression : multiplicative_expression '/' unary_expression",
"multiplicative_expression : multiplicative_expression '%' unary_expression",
"unary_expression : factor",
"unary_expression : reference_type",
"unary_expression : invocation",
"unary_expression : conversion_expression",
"unary_expression : '(' arithmetic_operation ')'",
"unary_expression : '(' ')'",
"conversion_expression : TOD '(' arithmetic_operation ')'",
"conversion_expression : TOD '(' error ')'",
"conversion_expression : TOD '{' error '}'",
"conversion_expression : TOD '{' '}'",
"conversion_expression : TOD '(' ')'",
"conversion_expression : TOD",
"factor : CTE_DOUBLE",
"factor : CTE_UINT",
"factor : CTE_LONG",
"factor : '-' CTE_DOUBLE",
"factor : '-' CTE_LONG",
"factor : '-' CTE_UINT",
"invocation : reference_function '(' real_parameter ')'",
"invocation : reference_function '(' ')'",
"invocation : reference_method '(' real_parameter ')'",
"invocation : reference_method '(' ')'",
"invocation : reference_function '(' real_parameter error ')'",
"invocation : reference_function '{' error '}'",
"invocation : reference_method '(' real_parameter error ')'",
"invocation : reference_method '{' error '}'",
"type : primitive_type",
"type : class_type",
"primitive_type : numeric_type",
"numeric_type : integral_type",
"numeric_type : floating_type",
"integral_type : UINT",
"integral_type : LONG",
"floating_type : DOUBLE",
"reference_interface : ID",
"class_type : ID",
"reference_class : ID",
"reference_function : ID",
"reference_method : field_acces",
"reference_type : primary",
"block : '{' block_statements RETURN ',' '}'",
"block : '{' block_statements RETURN ',' block_statements '}'",
"block : '{' RETURN ',' '}'",
"block : '{' RETURN '}'",
"block : '{' RETURN ',' block_statements '}'",
"block : '{' block_statements '}'",
"block : '(' block_statements RETURN ',' ')'",
"block : '(' RETURN ',' ')'",
"block : '{' '}'",
"block : '(' ')'",
"executable_block : '{' executable_block_statements '}'",
"executable_block : '{' '}'",
"executable_block : '{' executable_block_statements RETURN ',' '}'",
"executable_block : '{' executable_block_statements RETURN ',' executable_block_statements '}'",
"executable_block : '{' RETURN ',' '}'",
"$$1 :",
"executable_block : '{' RETURN ',' executable_block_statements '}' $$1",
"block_statements : block_statement",
"block_statements : block_statements block_statement",
"executable_block_statements : executable_statement",
"executable_block_statements : executable_block_statements executable_statement",
"block_statement : local_variable_declaration",
"block_statement : statement",
"executable_statement : if_then_declaration",
"executable_statement : if_then_else_declaration",
"executable_statement : for_in_range_statement",
"executable_statement : print_statement",
"executable_statement : expression_statement",
"executable_statement : empty_statement",
"executable_statement : class_declaration",
"executable_statement : interface_declaration",
"executable_statement : implement_for_declaration",
"executable_statement : local_variable_declaration",
"local_variable_declaration : type variable_declarators ','",
"statement : statement_without_trailing_substatement",
"statement : if_then_declaration",
"statement : if_then_else_declaration",
"statement : for_in_range_statement",
"statement : function_declaration",
"statement : print_statement",
"statement_without_trailing_substatement : block",
"statement_without_trailing_substatement : empty_statement",
"statement_without_trailing_substatement : expression_statement",
"expression_statement : statement_expression ','",
"expression_statement : statement_expression ';'",
"statement_expression : assignment",
"statement_expression : invocation",
"empty_statement : ','",
"if_then_declaration : IF if_then_cond if_then_body END_IF ','",
"if_then_declaration : IF if_then_cond if_then_body END_IF ';'",
"if_then_declaration : IF if_then_cond if_then_body ','",
"if_then_declaration : IF if_then_cond if_then_body ';'",
"if_then_declaration : IF if_then_cond if_then_body END_IF error '}'",
"if_then_declaration : IF if_then_cond if_then_body error '}'",
"if_then_cond : '(' equality_expression ')'",
"if_then_cond : '(' error ')'",
"if_then_cond : '{' equality_expression '}'",
"if_then_cond : '(' ')'",
"if_then_body : executable_statement",
"if_then_body : executable_block",
"if_then_else_declaration : IF if_then_cond if_then_else_body END_IF ','",
"if_then_else_declaration : IF if_then_cond if_then_else_body ','",
"if_then_else_declaration : IF if_then_cond if_then_else_body END_IF ';'",
"if_then_else_declaration : IF if_then_cond if_then_else_body ';'",
"if_then_else_declaration : IF if_then_cond if_then_else_body END_IF error '}'",
"if_then_else_declaration : IF if_then_cond if_then_else_body error '}'",
"if_else_then_body : executable_statement",
"if_else_then_body : executable_block",
"if_else_body : executable_statement",
"if_else_body : executable_block",
"if_then_else_body : if_else_then_body ELSE if_else_body",
"for_in_range_statement : FOR for_in_range_initializer IN RANGE for_in_range_cond for_in_range_body",
"for_in_range_initializer : reference_type",
"for_in_range_initializer : error IN",
"for_in_range_cond : '(' for_init ';' for_end ';' for_update ')'",
"for_in_range_cond : '(' for_init ',' for_end ',' for_update ')'",
"for_in_range_cond : '{' for_init error '}'",
"for_in_range_body : executable_block",
"for_in_range_body : executable_statement",
"for_init : factor",
"for_update : factor",
"for_end : factor",
"function_declaration : method_header method_body_without_prototype",
"method_body_without_prototype : block",
"method_body_without_prototype : ','",
"print_statement : PRINT CADENA ','",
"print_statement : PRINT CADENA error",
"print_statement : PRINT CADENA ';'",
"print_statement : PRINT factor ','",
"print_statement : PRINT primary ','",
"print_statement : PRINT invocation ','",
"print_statement : PRINT ','",
"print_statement : PRINT '\\000'",
};

//#line 1026 "grammar.y"

private static AnalizadorLexico aLexico;
private static Tercetos tercetos;
private static Scope scope;
private static int yylval_recognition = 0;

// This method is the one where BYACC/J expects to obtain its input tokens. 
// Wrap any file/string scanning code you have in this function. This method should return <0 if there is an error, and 0 when it encounters the end of input. See the examples to clarify what we mean.
int yylex() {
  Tupla<String, Short> t = aLexico.generateToken();
  String lexema = t.getFirst();
  Short token = t.getSecond();

  if (lexema != null){
    yylval = new ParserVal(lexema);
    yylval_recognition += 1;
  }
  
  return token;
}

// This method is expected by BYACC/J, and is used to provide error messages to be directed to the channels the user desires.
void yyerror(String msg) {
   {Logger.logError(aLexico.getProgramPosition(), "No se reconocio el programa.");} 
}


// ###############################################################
// metodos de lectura de los programadas
// ###############################################################

private static ArrayList<String> listFilesInDirectory(String path) {
  // Obtén el directorio actual
  File element = new File(System.getProperty("user.dir") + "/" + path);

  // Verifica si es un directorio o archivo válido
  if (element.isDirectory() || element.isFile()) {
    // Lista de archivos y directorios en el directorio actual
    File[] filesAndDirs = element.listFiles();
    ArrayList<String> out = new ArrayList<>();

    for (File fileOrDir : filesAndDirs) {
      out.add(fileOrDir.getName());
    }

    Collections.sort(out);

    // Itera a través de los archivos y directorios
    int i = 0;
    for (String name : out) {
      System.out.println("[" + i + "]" + ": " + name);
      i++;
    }

    return out;
  } else {
    System.err.println("f es un directorio válido.");
  }

  return null;
}

private static String generatePath() {
  ArrayList<String> directories = listFilesInDirectory("sample_programs");
  String path = "";

  if (!directories.isEmpty()) {
    Scanner scanner = new Scanner(System.in);
    int indice = -1;

    while (indice < 0) {
      System.out.print("Ingrese el numero de carpeta a acceder: ");
      String input = scanner.nextLine();
   
      try {
        indice = Integer.parseInt(input);
      } catch (Exception ex) {
        indice = -1;
      } 

      if (indice < directories.size() && indice >= 0) {
        path = directories.get(indice);
        directories = listFilesInDirectory("sample_programs" + "/" + path);
      } else {
        System.out.println("El indice no es correcto, ingrese nuevamente...");
        indice = -1;
      }

    }

    if (!directories.isEmpty()) {
      indice = -1;

      while (indice < 0) {

        System.out.print("Ingrese el numero de archivo binario a compilar: ");
        String input = scanner.nextLine();

        try {
          indice = Integer.parseInt(input);
        } catch (Exception ex) {
          indice = -1;
        } 

        if (indice < directories.size() && indice >= 0) {
          path += "/" + directories.get(Integer.parseInt(input));
        } else {
          System.out.println("El indice no es correcto, ingrese nuevamente...");
          indice = -1;
        }

      }
    }
    scanner.close();
  }
  return path;
}

private static String getProgramName(String s){
  int i = s.lastIndexOf("/") + 1;
  int j = s.lastIndexOf(".");
  return (j != -1)? s.substring(i, j) : s.substring(i);
}

public static void main (String [] args) throws IOException {
    System.out.println("Iniciando compilacion...");

    String input = generatePath();
    String program = getProgramName(input);
    
    aLexico = new AnalizadorLexico(input);

    if ( !aLexico.hasReadWell() )
        return;

    Parser aSintactico = new Parser();
    scope = new Scope();
    tercetos = new Tercetos();
    scope.addObserver(tercetos); //Añado al terceto para avisarle cuando cambio de scope

    aSintactico.run();

    //Borrado de los identificadores que quedan sin ambito
    TablaSimbolos.purge();
    TablaSimbolos.variablesHaventBeenUsed();

    if (!Logger.errorsOcurred()){
      tercetos.printRules();
      GeneradorAssembler.generarCodigoAssembler(tercetos);
      Logger.dumpASM(program);
      System.out.println("ASSEMBLER \n" + GeneradorAssembler.codigoAssembler);
    }


    //aSintactico.dump_stacks(yylval_recognition);
    System.out.println(Logger.dumpLog());
    System.out.println(aLexico.getProgram());
}

//#line 1138 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 4:
//#line 45 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Un programa debe estar delimitado por llaves '{}'.");}
break;
case 8:
//#line 58 "grammar.y"
{scope.reset(); if (!val_peek(0).sval.isEmpty()) scope.changeScope(val_peek(0).sval);}
break;
case 9:
//#line 59 "grammar.y"
{scope.reset(); if (!val_peek(0).sval.isEmpty()) scope.changeScope(val_peek(0).sval);}
break;
case 10:
//#line 60 "grammar.y"
{scope.reset();}
break;
case 11:
//#line 61 "grammar.y"
{scope.reset();}
break;
case 12:
//#line 64 "grammar.y"
{
                        yyval = val_peek(1);
                        if (!val_peek(1).sval.isEmpty()){
                          Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una clase.");

                          String error = TablaClases.chequeoAtributoSobreescrito(val_peek(1).sval);
                          if (error != null) 
                            Logger.logError(aLexico.getProgramPosition(), error);
                        }
                    }
break;
case 13:
//#line 74 "grammar.y"
{
                        yyval = val_peek(2);
                        if (!val_peek(2).sval.isEmpty()){
                          Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una CLASS.");

                          String error = TablaClases.chequeoAtributoSobreescrito(val_peek(2).sval);
                          if (error != null) 
                            Logger.logError(aLexico.getProgramPosition(), error);
                          if (!val_peek(1).sval.isEmpty()) {
                            String msj = TablaClases.implementaMetodosInterfaz(val_peek(2).sval,val_peek(1).sval);
                            if (msj.isEmpty())
                              Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una CLASS que implementa una interface e implementa todos sus metodos.");
                            else
                              Logger.logError(aLexico.getProgramPosition(), msj);
                          }

                        }            
                    }
break;
case 14:
//#line 94 "grammar.y"
{
              if(!scope.isDeclaredInMyScope(val_peek(0).sval)){
                TablaSimbolos.addClase(val_peek(0).sval); 
                TablaClases.addClase(val_peek(0).sval);
                yyval = new ParserVal(val_peek(0).sval);
              } else {
                Logger.logError(aLexico.getProgramPosition(), "La clase " + val_peek(0).sval + " ya esta declarada en el ambito" + scope.getCurrentScope() + ".");
                yyval = new ParserVal("");
              }
                scope.stack(val_peek(0).sval); 
            }
break;
case 17:
//#line 109 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "La declaracion de una clase debe estar delimitado por llaves \"{...}\".");}
break;
case 18:
//#line 110 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "La declaracion de una clase debe estar delimitado por llaves \"{...}\".");}
break;
case 25:
//#line 125 "grammar.y"
{
                      if (!(val_peek(2).sval.isEmpty() || val_peek(1).sval.isEmpty())) {
                        ArrayList<String> ambitos = scope.getAmbitos(val_peek(1).sval);
                        String _attributes = ambitos.get(0);
                        String _class = "";
                        if (ambitos.size() >= 2){
                            _class = ambitos.get(2);
                        }

                        Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una declaracion de atributo/s.");
                        TablaSimbolos.addTipoVariable(val_peek(2).sval, val_peek(1).sval);
                        
                        if (TablaSimbolos.isClass(val_peek(2).sval + Scope.getScopeMain())) {
                            TablaClases.addAtributos(val_peek(2).sval, _attributes, _class);
                            TablaClases.addInstancia(val_peek(2).sval, val_peek(1).sval, aLexico.getProgramPosition());
                            TablaSimbolos.addUsoInstancia(val_peek(1).sval);
                        }
                        else {
                            TablaSimbolos.addUsedVariables(val_peek(1).sval);
                            TablaSimbolos.addPositions(val_peek(1).sval, aLexico.getProgramPosition());
                            TablaClases.addAtributos(_attributes, _class);
                        }
                      }
                   }
break;
case 26:
//#line 149 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Se esperaba una \',\' en el final de la sentencia.");}
break;
case 28:
//#line 153 "grammar.y"
{
                        if (!(val_peek(2).sval.isEmpty() || val_peek(0).sval.isEmpty()))
                          yyval = new ParserVal(val_peek(2).sval.substring(0, val_peek(2).sval.indexOf(Scope.SEPARATOR)) + ";" + val_peek(0).sval);
                        else {
                          if (val_peek(2).sval.isEmpty())
                            yyval = new ParserVal(val_peek(0).sval);
                          else 
                            yyval = new ParserVal(val_peek(2).sval);
                        }
                     }
break;
case 30:
//#line 168 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No esta permitida la inicialización en la declaracion de variables.");}
break;
case 31:
//#line 169 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No esta permitida la inicialización en la declaracion de variables.");}
break;
case 32:
//#line 170 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No esta permitida la inicialización en la declaracion de variables.");}
break;
case 33:
//#line 171 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No esta permitida la inicialización en la declaracion de variables.");}
break;
case 34:
//#line 172 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No esta permitida la inicialización en la declaracion de variables.");}
break;
case 35:
//#line 175 "grammar.y"
{
                          if (!scope.isDeclaredInMyScope(val_peek(0).sval)) {
                              yyval = new ParserVal(scope.changeScope(val_peek(0).sval));
                          }
                          else {
                              Logger.logError(aLexico.getProgramPosition() - 1, "La variable " + val_peek(0).sval + " ya esta declarado en el ambito " + scope.getCurrentScope() + ".");
                              yyval = new ParserVal("");
                          }
                        }
break;
case 37:
//#line 189 "grammar.y"
{
                      if (!val_peek(2).sval.isEmpty()) {
                        ArrayList<String> ambitos = scope.getAmbitos(val_peek(2).sval);
                        if (ambitos.size() > 2) {
                          String _method = ambitos.get(0); 
                          String _class = ambitos.get(2);

                            if (val_peek(1).sval.isEmpty()) {
                              TablaClases.addMetodoIMPL(_method, _class);
                              TablaSimbolos.setFuncPrototype(val_peek(2).sval);
                            } else {
                              TablaClases.addMetodo(_method, _class);
                              TablaSimbolos.setImplemented(val_peek(2).sval);
                            }
                        } else { 
                            Logger.logError(aLexico.getProgramPosition(), "Hay un error en la declaracion del metodo.");
                        }
                      scope.deleteLastScope();
                      }
                   }
break;
case 38:
//#line 209 "grammar.y"
{
                      if (!val_peek(1).sval.isEmpty()) {
                        ArrayList<String> ambitos = scope.getAmbitos(val_peek(1).sval);
                        
                        if (ambitos.size() > 2) {
                          String _method = ambitos.get(0); 
                          String _class = ambitos.get(2);

                            if (val_peek(0).sval.isEmpty()) {
                              TablaClases.addMetodoIMPL(_method, _class);
                              TablaSimbolos.setFuncPrototype(val_peek(1).sval);
                            } else {
                              TablaClases.addMetodo(_method, _class);
                              TablaSimbolos.setImplemented(val_peek(1).sval);
                            }
                        } else { 
                            Logger.logError(aLexico.getProgramPosition(), "Hay un error en la declaracion del metodo.");
                        }
                      scope.deleteLastScope();
                      }
                   }
break;
case 39:
//#line 232 "grammar.y"
{yyval = val_peek(0);}
break;
case 40:
//#line 233 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No se permite retornar un tipo, el retorno debe ser VOID."); yyval = new ParserVal("");}
break;
case 42:
//#line 239 "grammar.y"
{
                      String ref = val_peek(3).sval;
                      String par = val_peek(1).sval;
                      if (!ref.isEmpty() && !par.isEmpty()) {
                        yyval = new ParserVal(ref);
                        TablaSimbolos.addParameter(ref, par);
                      } else {
                        yyval = new ParserVal("");
                      }
                      
                  }
break;
case 43:
//#line 250 "grammar.y"
{
                      String ref = val_peek(2).sval;
                      if (!ref.isEmpty()) {
                        Logger.logRule(aLexico.getProgramPosition(), "Se reconocio un metodo sin p/j de parametro.");
                        yyval = new ParserVal(ref);
                        TablaSimbolos.addParameter(ref);
                      } else {
                        yyval = val_peek(2);
                      } 
                      
                  }
break;
case 44:
//#line 261 "grammar.y"
{ Logger.logError(aLexico.getProgramPosition(), "Solo se permite la declaracion de un unico parametro formal.");}
break;
case 45:
//#line 262 "grammar.y"
{ Logger.logError(aLexico.getProgramPosition(), "La declaracion de un metodo debe estar delimitado por parentesis \"(...)\"."); }
break;
case 46:
//#line 265 "grammar.y"
{
                if(!scope.isDeclaredInMyScope(val_peek(0).sval)) {
                  yyval = new ParserVal(val_peek(0).sval);
                  if (scope.hasPassedNesting()) {
                    Logger.logError(aLexico.getProgramPosition(), "Solo se permite 1 nivel de anidamiento, el metodo/funcion " + val_peek(0).sval + " no cumple con esto.");
                    yyval = new ParserVal("");
                  } else {
                    yyval = new ParserVal(scope.changeScope(val_peek(0).sval));
                    TablaSimbolos.addFunction(yyval.sval);
                    scope.stack(val_peek(0).sval);
                  }
                } else {
                  Logger.logError(aLexico.getProgramPosition(), "El metodo ya esta declarado en el ambito" + scope.getCurrentScope() + ".");
                  yyval = new ParserVal("");
                  }                 
              }
break;
case 48:
//#line 285 "grammar.y"
{yyval = new ParserVal("");}
break;
case 49:
//#line 290 "grammar.y"
{
                      if (TablaSimbolos.isClass(val_peek(1).sval + Scope.getScopeMain())) 
                        Logger.logError(aLexico.getProgramPosition(), "No se permite que un parametro formal sea del tipo de una clase.");
                      
                      if (!val_peek(0).sval.isEmpty()) {
                          yyval = new ParserVal(val_peek(0).sval);
                          TablaSimbolos.addTipoVariable(val_peek(1).sval, val_peek(0).sval);
                          TablaSimbolos.addUsedVariables(val_peek(0).sval);
                          TablaSimbolos.addPositions(val_peek(0).sval, aLexico.getProgramPosition());
                      } else yyval = new ParserVal(""); 
                  }
break;
case 51:
//#line 304 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No se permite una declaración de variable en un parametro real.");}
break;
case 52:
//#line 307 "grammar.y"
{
                            Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una herencia compuesta.");

                            if (!val_peek(1).sval.isEmpty()) { /*si existe la clase a la cual quiere heredar*/
                                ArrayList<String> ambitos = scope.getAmbitos();
                                String _parentClass = val_peek(1).sval; 
                                String _class = ambitos.get(1);
                                if (!TablaClases.tieneHerencia(_class)){
                                    TablaClases.addHerencia(_class, _parentClass);
                                } else {
                                    Logger.logError(aLexico.getProgramPosition(), "No se permite herencia multiple");
                                }
                                Logger.logRule(aLexico.getProgramPosition(), "La clase " + _class + " hereda de " + _parentClass + ".");
                            } else {
                                Logger.logError(aLexico.getProgramPosition(), "La clase a la cual se quiere heredar no existe");
                            }
                        }
break;
case 53:
//#line 324 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No se permite herencia multiple.");}
break;
case 54:
//#line 325 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No se permite herencia multiple.");}
break;
case 55:
//#line 328 "grammar.y"
{yyval = new ParserVal(val_peek(0).sval); if (val_peek(0).sval.contains(";")) Logger.logError(aLexico.getProgramPosition(), "No se permite implementar multiples interfaces.");}
break;
case 57:
//#line 332 "grammar.y"
{yyval = new ParserVal(val_peek(2).sval + ";" + val_peek(0).sval);}
break;
case 58:
//#line 333 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Las interfaces deben estar separadas por ';'.");}
break;
case 59:
//#line 336 "grammar.y"
{yyval = val_peek(1);}
break;
case 60:
//#line 339 "grammar.y"
{
                    if (!scope.isDeclaredInMyScope(val_peek(0).sval)) {
                      TablaClases.addInterface(val_peek(0).sval);
                      TablaSimbolos.addInterface(val_peek(0).sval);
                      yyval = new ParserVal(val_peek(0).sval);
                    } else {
                      Logger.logError(aLexico.getProgramPosition(), "La interface " + val_peek(0).sval + " ya esta declarada en el ambito" + scope.getCurrentScope() + ".");
                      yyval = new ParserVal("");
                    }
                      scope.stack(val_peek(0).sval); 
                }
break;
case 62:
//#line 353 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "El cuerpo de la interface debe estar delimitado por llaves \"{...}\".");}
break;
case 64:
//#line 355 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "El cuerpo de la interface debe estar delimitado por llaves \"{...}\".");}
break;
case 67:
//#line 362 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No se permite la declaracion de constantes en las interfaces.");}
break;
case 68:
//#line 363 "grammar.y"
{
                                if (!val_peek(0).sval.isEmpty()) {
                                  ArrayList<String> ambitos = scope.getAmbitos(val_peek(0).sval);
                                  String _method = ambitos.get(0);
                                  String _class = ambitos.get(2);

                                  TablaClases.addMetodoIMPL(_method, _class);

                                  scope.deleteLastScope();
                                }
                             }
break;
case 69:
//#line 374 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No esta permitida la herencia en una interface.");}
break;
case 73:
//#line 382 "grammar.y"
{yyval = new ParserVal(""); Logger.logError(aLexico.getProgramPosition(), "No se puede declarar un bloque dentro de un metodo en una interface.");}
break;
case 75:
//#line 388 "grammar.y"
{yyval = val_peek(1);}
break;
case 76:
//#line 389 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Se esperaba una \',\' en el final de la sentencia.");}
break;
case 77:
//#line 390 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Se esperaba una \',\' no \';\'en el final de la sentencia.");}
break;
case 79:
//#line 394 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Es necesario implementar el cuerpo del metodo.");}
break;
case 80:
//#line 395 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Se debe referenciar a una clase.");}
break;
case 81:
//#line 396 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Seguido de la referencia a la clase debe ir el caracter ':'.");}
break;
case 84:
//#line 401 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "El cuerpo de la interface debe estar delimitado por llaves \"{...}\".");}
break;
case 85:
//#line 402 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "El cuerpo de la interface debe estar delimitado por llaves \"{...}\".");}
break;
case 88:
//#line 410 "grammar.y"
{

                                    if (!val_peek(1).sval.isEmpty()){

                                      ArrayList<String> ambitos = scope.getAmbitos(val_peek(1).sval);
                                      if (ambitos.size() > 2) {
                                        String _class = ambitos.get(1); 
                                        String _method = ambitos.get(2);                                      

                                        if (!TablaClases.esUnMetodoAImplementar(_method, _class)){
                                          if (TablaClases.esUnMetodoConcreto(_method, _class)) {
                                            Logger.logError(aLexico.getProgramPosition(), "Se intentó implementar un metodo ya implementado (IMPL FOR)");
                                          } else {
                                            Logger.logError(aLexico.getProgramPosition(), "Se intentó implementar un metodo que no existe (IMPL FOR)");
                                          }  
                                        } else {
                                          TablaSimbolos.setImplemented(val_peek(1).sval.replaceAll(".*@([^@]*)@([^@]*)@([^@:]*):([^@]*)", "$3@$1@$2"));
                                          TablaClases.setMetodoIMPL(_method, _class);
                                        }
                                      }
                                      scope.deleteLastScope();
                                     }
                                  }
break;
case 89:
//#line 433 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Es necesario implementar el metodo de la clase.");}
break;
case 90:
//#line 434 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Es necesario implementar el metodo de la clase.");}
break;
case 91:
//#line 438 "grammar.y"
{yyval = val_peek(0);}
break;
case 92:
//#line 439 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No se permite retornar un tipo, el retorno debe ser VOID."); yyval = new ParserVal("");}
break;
case 93:
//#line 444 "grammar.y"
{
                                String ref = val_peek(3).sval;
                                String par = val_peek(1).sval;

                                if (!ref.isEmpty()) 
                                  yyval = new ParserVal(ref + TablaClases.TYPE_SEPARATOR + par);
                                else 
                                  Logger.logError(aLexico.getProgramPosition(), "No se reconocio el metodo a sobreescribir con p/j de parametro.");
                                
                            }
break;
case 94:
//#line 454 "grammar.y"
{
                                yyval = new ParserVal(val_peek(2).sval + TablaClases.TYPE_SEPARATOR + TablaSimbolos.SIN_PARAMETRO);
                            }
break;
case 95:
//#line 457 "grammar.y"
{ Logger.logError(aLexico.getProgramPosition(), "Solo se permite la declaracion de un unico parametro formal.");}
break;
case 96:
//#line 458 "grammar.y"
{ Logger.logError(aLexico.getProgramPosition(), "La declaracion de un metodo debe estar delimitado por parentesis \"(...)\"."); }
break;
case 97:
//#line 461 "grammar.y"
{yyval = val_peek(1);}
break;
case 98:
//#line 465 "grammar.y"
{
                    scope.stack(val_peek(0).sval);
                    yyval = new ParserVal(scope.getCurrentScope());
                  }
break;
case 99:
//#line 477 "grammar.y"
{
            String type = tercetos.typeTerceto(val_peek(2).sval, val_peek(0).sval);
            if (type.equals(Terceto.ERROR))
              Logger.logError(aLexico.getProgramPosition(), "Incompatibilidad de tipos entre " + val_peek(2).sval + " y " + val_peek(0).sval);
            else {
              tercetos.add("=", val_peek(2).sval, val_peek(0).sval, type);
              tercetos.declaredFactorsUsed(val_peek(0).sval);
            }
           }
break;
case 100:
//#line 486 "grammar.y"
{
              String type = tercetos.typeTerceto(val_peek(2).sval, val_peek(0).sval);
              if (type.equals(Terceto.ERROR))
                Logger.logError(aLexico.getProgramPosition(), "Incompatibilidad de tipos entre " + val_peek(2).sval + " y " + val_peek(0).sval);
              else {
                String ref = tercetos.add("-", val_peek(2).sval, val_peek(0).sval, type);

                type = tercetos.typeTerceto(val_peek(2).sval, ref);
                if (type.equals(Terceto.ERROR))
                  Logger.logError(aLexico.getProgramPosition(), "Incompatibilidad de tipos entre " + val_peek(2).sval + " y " + val_peek(0).sval);
                else {
                  tercetos.add("=", val_peek(2).sval, ref, type);
                  tercetos.declaredFactorsUsed(val_peek(0).sval);
                }
              }
           }
break;
case 101:
//#line 502 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Las asignaciones se deben hacer con el caracter '=' o '-='.");}
break;
case 102:
//#line 503 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Las asignaciones se deben hacer con el caracter '=' o '-='.");}
break;
case 103:
//#line 504 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Las asignaciones se deben hacer con el caracter '=' o '-='.");}
break;
case 104:
//#line 505 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Las asignaciones se deben hacer con el caracter '=' o '-='.");}
break;
case 105:
//#line 506 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Las asignaciones se deben hacer con el caracter '=' o '-='.");}
break;
case 107:
//#line 510 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No se puede invocar un metodo/funcion en el lado izquierdo de una asignación.");}
break;
case 108:
//#line 511 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No se puede utilizar constantes en el lado izquierdo de una asignación.");}
break;
case 109:
//#line 515 "grammar.y"
{yyval = new ParserVal(val_peek(2).sval + "." + val_peek(0).sval);}
break;
case 112:
//#line 522 "grammar.y"
{yyval = new ParserVal(val_peek(0).sval);}
break;
case 113:
//#line 523 "grammar.y"
{
                      String type = tercetos.typeTerceto(val_peek(2).sval, val_peek(0).sval);
                      if (type.equals(Terceto.ERROR))
                        Logger.logError(aLexico.getProgramPosition(), "Incompatibilidad de tipos entre " + val_peek(2).sval + " y " + val_peek(0).sval);
                      else
                        yyval = new ParserVal(tercetos.add("==", val_peek(2).sval, val_peek(0).sval, type));
                    }
break;
case 114:
//#line 530 "grammar.y"
{
                      String type = tercetos.typeTerceto(val_peek(2).sval, val_peek(0).sval);
                      if (type.equals(Terceto.ERROR))
                        Logger.logError(aLexico.getProgramPosition(), "Incompatibilidad de tipos entre " + val_peek(2).sval + " y " + val_peek(0).sval);
                      else
                        yyval = new ParserVal(tercetos.add("!!", val_peek(2).sval, val_peek(0).sval, type));
                    }
break;
case 115:
//#line 539 "grammar.y"
{yyval = new ParserVal(val_peek(0).sval);}
break;
case 116:
//#line 540 "grammar.y"
{
                        String type = tercetos.typeTerceto(val_peek(2).sval, val_peek(0).sval);
                        if (type.equals(Terceto.ERROR))
                          Logger.logError(aLexico.getProgramPosition(), "Incompatibilidad de tipos entre " + val_peek(2).sval + " y " + val_peek(0).sval);
                        else
                          yyval = new ParserVal(tercetos.add("<", val_peek(2).sval, val_peek(0).sval, type));
                      }
break;
case 117:
//#line 547 "grammar.y"
{
                        String type = tercetos.typeTerceto(val_peek(2).sval, val_peek(0).sval);
                        if (type.equals(Terceto.ERROR))
                          Logger.logError(aLexico.getProgramPosition(), "Incompatibilidad de tipos entre " + val_peek(2).sval + " y " + val_peek(0).sval);
                        else
                          yyval = new ParserVal(tercetos.add(">", val_peek(2).sval, val_peek(0).sval, type));
                      }
break;
case 118:
//#line 554 "grammar.y"
{
                        String type = tercetos.typeTerceto(val_peek(2).sval, val_peek(0).sval);
                        if (type.equals(Terceto.ERROR))
                          Logger.logError(aLexico.getProgramPosition(), "Incompatibilidad de tipos entre " + val_peek(2).sval + " y " + val_peek(0).sval);
                        else 
                          yyval = new ParserVal(tercetos.add(">=", val_peek(2).sval, val_peek(0).sval, type));
                        }
break;
case 119:
//#line 561 "grammar.y"
{
                        String type = tercetos.typeTerceto(val_peek(2).sval, val_peek(0).sval);
                        if (type.equals(Terceto.ERROR))
                          Logger.logError(aLexico.getProgramPosition(), "Incompatibilidad de tipos entre " + val_peek(2).sval + " y " + val_peek(0).sval);
                        else 
                          yyval = new ParserVal(tercetos.add("<=", val_peek(2).sval, val_peek(0).sval, type));
                        }
break;
case 120:
//#line 570 "grammar.y"
{yyval = new ParserVal(val_peek(0).sval);}
break;
case 121:
//#line 573 "grammar.y"
{yyval = new ParserVal(val_peek(0).sval); Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una operacion aritmetica.");}
break;
case 122:
//#line 574 "grammar.y"
{
                        String type = tercetos.typeTerceto(val_peek(2).sval, val_peek(0).sval);
                        if (type.equals(Terceto.ERROR))
                          Logger.logError(aLexico.getProgramPosition(), "Incompatibilidad de tipos entre " + val_peek(2).sval + " y " + val_peek(0).sval);
                        else
                          yyval = new ParserVal(tercetos.add("+", val_peek(2).sval, val_peek(0).sval, type));
                    }
break;
case 123:
//#line 581 "grammar.y"
{
                        String type = tercetos.typeTerceto(val_peek(2).sval, val_peek(0).sval);
                        if (type.equals(Terceto.ERROR))
                          Logger.logError(aLexico.getProgramPosition(), "Incompatibilidad de tipos entre " + val_peek(2).sval + " y " + val_peek(0).sval);
                        else
                          yyval = new ParserVal(tercetos.add("-", val_peek(2).sval, val_peek(0).sval, type));
                    }
break;
case 124:
//#line 590 "grammar.y"
{yyval = new ParserVal(val_peek(0).sval);}
break;
case 125:
//#line 591 "grammar.y"
{
                            String type = tercetos.typeTerceto(val_peek(2).sval, val_peek(0).sval);
                            if (type.equals(Terceto.ERROR))
                              Logger.logError(aLexico.getProgramPosition(), "Incompatibilidad de tipos entre " + val_peek(2).sval + " y " + val_peek(0).sval);
                            else
                              yyval = new ParserVal(tercetos.add("*", val_peek(2).sval, val_peek(0).sval, type));
                          }
break;
case 126:
//#line 598 "grammar.y"
{
                            String type = tercetos.typeTerceto(val_peek(2).sval, val_peek(0).sval);
                            if (type.equals(Terceto.ERROR))
                              Logger.logError(aLexico.getProgramPosition(), "Incompatibilidad de tipos entre " + val_peek(2).sval + " y " + val_peek(0).sval);
                            else
                              yyval = new ParserVal(tercetos.add("/", val_peek(2).sval, val_peek(0).sval, type));
                          }
break;
case 127:
//#line 605 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "El operator % no es valido.");}
break;
case 130:
//#line 610 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No se puede invocar un metodo/funcion en una expresion.");}
break;
case 132:
//#line 612 "grammar.y"
{
                    if (tercetos.hasNestingExpressions(val_peek(1).sval)) 
                      Logger.logError(aLexico.getProgramPosition(), "No se permite el anidamiento de expresiones.");
                    yyval = new ParserVal(val_peek(1).sval);  
                 }
break;
case 133:
//#line 617 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Termino vacio.");}
break;
case 134:
//#line 620 "grammar.y"
{
                          yyval = new ParserVal(tercetos.add("TOD", val_peek(1).sval, "-"));
                          tercetos.TODtracking(yyval.sval);
                          Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una conversion explicita.");
                      }
break;
case 135:
//#line 625 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No se puede convertir la expresion declarada.");}
break;
case 136:
//#line 626 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "El metodo TOD debe estar delimitado por parentesis \"(...)\".");}
break;
case 137:
//#line 627 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "El metodo TOD debe estar delimitado por parentesis \"(...)\".");}
break;
case 138:
//#line 628 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Es necesario pasar una expresion aritmetica.");}
break;
case 139:
//#line 629 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "TOD es un operador unario, es necesario pasarle una expresion entre parentesis.");}
break;
case 140:
//#line 632 "grammar.y"
{yyval = new ParserVal(val_peek(0).sval); }
break;
case 141:
//#line 633 "grammar.y"
{yyval = new ParserVal(val_peek(0).sval);}
break;
case 142:
//#line 634 "grammar.y"
{yyval = new ParserVal(TablaTipos.chequearRangoLong(val_peek(0).sval, aLexico.getProgramPosition()));}
break;
case 143:
//#line 635 "grammar.y"
{ yyval = new ParserVal(TablaTipos.negarDouble(val_peek(0).sval));}
break;
case 144:
//#line 636 "grammar.y"
{
              if(!TablaTipos.chequearRangoLongNegativo(val_peek(0).sval)){
                  Logger.logWarning(aLexico.getProgramPosition(),"LONG NEGATIVO FUERA DE RANGO SE TRUNCA AL MINIMO PERMITIDO");
                  yyval = new ParserVal(TablaTipos.negarLong("2147483648"));
              } else{
                  yyval = new ParserVal(TablaTipos.negarLong(val_peek(0).sval));
              }
       }
break;
case 145:
//#line 644 "grammar.y"
{Logger.logError(aLexico.getProgramPosition() ,"Los tipos UINT deben ser sin signo."); yyval = new ParserVal(val_peek(0).sval);}
break;
case 146:
//#line 647 "grammar.y"
{
                String ref = val_peek(3).sval;

                if ( !ref.isEmpty() ){
                  yyval = new ParserVal(ref);
                  
                  if (!tercetos.linkFunction(ref, val_peek(1).sval))
                    Logger.logError(aLexico.getProgramPosition(), "La funcion a invocar no posee parametro formal.");
                  else
                    Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una invocacion a una funcion, con pj de parametro.");
                } 
            }
break;
case 147:
//#line 659 "grammar.y"
{
                String ref = val_peek(2).sval;

                if (!ref.isEmpty()){
                  yyval = new ParserVal(ref);
                  
                  if (!tercetos.linkFunction(ref))
                    Logger.logError(aLexico.getProgramPosition(), "La funcion a invocar no posee parametro formal.");
                  else
                    Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una invocacion a una funcion, con pj de parametro.");
                } 
            }
break;
case 148:
//#line 671 "grammar.y"
{
                String ref = val_peek(3).sval;

                if ( !ref.isEmpty() ){
                  yyval = new ParserVal(ref);
                  
                  if (!tercetos.linkMethod(ref, val_peek(1).sval, scope.getCurrentScope()))
                    Logger.logError(aLexico.getProgramPosition(), "La funcion a invocar no posee parametro formal.");
                  else
                    Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una invocacion a una funcion, con pj de parametro.");
                } 
            }
break;
case 149:
//#line 683 "grammar.y"
{
                String ref = val_peek(2).sval;

                if (!ref.isEmpty()){
                  yyval = new ParserVal(ref);
                  
                  if (!tercetos.linkMethod(ref, scope.getCurrentScope()))
                    Logger.logError(aLexico.getProgramPosition(), "La funcion a invocar no posee parametro formal.");
                  else
                    Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una invocacion a una funcion, con pj de parametro.");
                } 
            }
break;
case 150:
//#line 695 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Solo se permite el pasaje de un parametro real.");}
break;
case 151:
//#line 696 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Solo se permite el pasaje de un parametro real.");}
break;
case 152:
//#line 697 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Solo se permite el pasaje de un parametro real.");}
break;
case 153:
//#line 698 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Solo se permite el pasaje de un parametro real.");}
break;
case 159:
//#line 717 "grammar.y"
{yyval = new ParserVal("UINT");}
break;
case 160:
//#line 718 "grammar.y"
{yyval = new ParserVal("LONG");}
break;
case 161:
//#line 721 "grammar.y"
{yyval = new ParserVal("DOUBLE");}
break;
case 162:
//#line 725 "grammar.y"
{
                        String reference = scope.searchInterface(val_peek(0).sval);
                        if (reference == null) {
                          yyval = new ParserVal("");
                          Logger.logError(aLexico.getProgramPosition(), "La interface " + val_peek(0).sval + " no esta al alcance.");
                        } else {
                          yyval = new ParserVal(val_peek(0).sval);
                        }
                    }
break;
case 163:
//#line 736 "grammar.y"
{
              String reference = scope.searchClass(val_peek(0).sval);

              if (reference == null) {
                Logger.logError(aLexico.getProgramPosition(), "La clase " + val_peek(0).sval + " no esta al alcance.");
                yyval = new ParserVal("");
              } else {
                yyval = new ParserVal(val_peek(0).sval);
              }
            }
break;
case 164:
//#line 748 "grammar.y"
{
                    String reference = scope.searchClass(val_peek(0).sval);
                    /*Revisar esto*/
                    if (reference == null) {
                      Logger.logError(aLexico.getProgramPosition(), "La clase " + val_peek(0).sval + " no esta al alcance.");
                      yyval = new ParserVal("");
                    } else {
                      scope.stack(val_peek(0).sval);
                      yyval = new ParserVal(reference);
                    }
                  }
break;
case 165:
//#line 762 "grammar.y"
{
                      String reference = scope.searchFunc(val_peek(0).sval);

                      if(reference == null) {
                        Logger.logError(aLexico.getProgramPosition(), "La funcion " + val_peek(0).sval + " no esta al alcance.");
                        yyval = new ParserVal("");
                      }
                      else
                        yyval = new ParserVal(reference);
               }
break;
case 166:
//#line 774 "grammar.y"
{
                    String instance = TablaClases.getInstance(val_peek(0).sval);
                    String instance_s = scope.searchInstance(instance);

                    if (instance_s != null) {
                      String reference = TablaClases.searchMethod(val_peek(0).sval, scope.getAmbito(instance_s));

                      if(reference == null) {
                        Logger.logError(aLexico.getProgramPosition(), "El metodo " + val_peek(0).sval + " no esta al alcance.");
                        yyval = new ParserVal("");
                      } else
                        yyval = new ParserVal(reference);
                    } else {
                        Logger.logError(aLexico.getProgramPosition(), "La instancia " + instance + " no esta al alcance.");
                        yyval = new ParserVal("");
                    }
               }
break;
case 167:
//#line 794 "grammar.y"
{
                    String reference = scope.searchVar(val_peek(0).sval);
                    if(reference == null) {
                      Logger.logError(aLexico.getProgramPosition(), "La variable " + val_peek(0).sval + " no esta al alcance.");
                      yyval = new ParserVal("");
                    }
                    else
                      yyval = new ParserVal(reference);
               }
break;
case 168:
//#line 810 "grammar.y"
{tercetos.addReturn();}
break;
case 169:
//#line 811 "grammar.y"
{tercetos.addReturn(); Logger.logWarning(aLexico.getProgramPosition(), "Se esta declarando un bloque sin utilizar luego de un RETURN.");}
break;
case 170:
//#line 812 "grammar.y"
{tercetos.addReturn();}
break;
case 171:
//#line 813 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Se esperaba una ',' luego del RETURN");}
break;
case 172:
//#line 814 "grammar.y"
{tercetos.addReturn(); Logger.logWarning(aLexico.getProgramPosition(), "Se esta declarando un bloque sin utilizar luego de un RETURN");}
break;
case 173:
//#line 815 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Es necesario declarar el retorno del bloque.");}
break;
case 174:
//#line 816 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Un bloque debe estar delimitado por llaves \"{...} y es necesario declarar el retorno del bloque.");}
break;
case 175:
//#line 817 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Un bloque debe estar delimitado por llaves \"{...}\".");}
break;
case 176:
//#line 818 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Es necesario declarar el retorno del bloque.");}
break;
case 177:
//#line 819 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Un bloque debe estar delimitado por llaves \"{...}\".");}
break;
case 180:
//#line 824 "grammar.y"
{tercetos.addReturn(); Logger.logWarning(aLexico.getProgramPosition(), "Se esta declarando un bloque sin utilizar luego de un RETURN");}
break;
case 181:
//#line 825 "grammar.y"
{tercetos.addReturn(); Logger.logWarning(aLexico.getProgramPosition(), "Se esta declarando un bloque sin utilizar luego de un RETURN");}
break;
case 182:
//#line 826 "grammar.y"
{tercetos.addReturn();}
break;
case 183:
//#line 827 "grammar.y"
{tercetos.addReturn();}
break;
case 184:
//#line 829 "grammar.y"
{Logger.logWarning(aLexico.getProgramPosition(), "Se esta declarando un bloque sin utilizar luego de un RETURN");}
break;
case 197:
//#line 850 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No se permite declarar una clase en un bloque ejecutable.");}
break;
case 198:
//#line 851 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No se permite declarar una interface en un bloque ejecutable.");}
break;
case 199:
//#line 852 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No se permite declarar un impl for en un bloque ejecutable.");}
break;
case 200:
//#line 853 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "No se permiten sentencias declarativas en un bloque ejecutable.");}
break;
case 201:
//#line 856 "grammar.y"
{
                              if (!(val_peek(2).sval.isEmpty() || val_peek(1).sval.isEmpty())) {
                                TablaSimbolos.addTipoVariable(val_peek(2).sval, val_peek(1).sval);                      

                                if (TablaSimbolos.isClass(val_peek(2).sval + Scope.getScopeMain())) {
                                  TablaClases.addInstancia(val_peek(2).sval, val_peek(1).sval, aLexico.getProgramPosition());
                                  TablaSimbolos.addUsoInstancia(val_peek(1).sval);
                                } else {
                                  TablaSimbolos.addUsedVariables(val_peek(1).sval);
                                  TablaSimbolos.addPositions(val_peek(1).sval, aLexico.getProgramPosition());
                                }
                                Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una declaracion de variable local.");
                              } 
                            }
break;
case 212:
//#line 888 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Se esperaba una \',\' en el final de la sentencia.");}
break;
case 216:
//#line 899 "grammar.y"
{
                         tercetos.backPatching(0);
                         tercetos.addLabel();
                    }
break;
case 217:
//#line 903 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "La sentencia de control IF debe terminar con ','.");}
break;
case 218:
//#line 904 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "La sentencia de control IF debe terminar con la palabra reservada END_IF.");}
break;
case 219:
//#line 905 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "La sentencia de control IF debe terminar con la palabra reservada END_IF y con finalizar con ','.");}
break;
case 220:
//#line 906 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "La sentencia de control IF debe terminar con ','.");}
break;
case 221:
//#line 907 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "La sentencia de control IF debe terminar con ','.");}
break;
case 222:
//#line 910 "grammar.y"
{tercetos.addCondBranch(val_peek(1).sval);}
break;
case 223:
//#line 911 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "La condicion de la sentencia de control IF no es correcta.");}
break;
case 224:
//#line 912 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "La condicion debe estar delimitado por parentesis \"(...)\".");}
break;
case 228:
//#line 920 "grammar.y"
{
                            Logger.logRule(aLexico.getProgramPosition(), "Se reconocio una sentencia IF ELSE.");
                            tercetos.backPatching(0);
                            tercetos.addLabel();
                          }
break;
case 229:
//#line 925 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "La sentencia de control IF ELSE debe terminar con la palabra reservada END_IF.");}
break;
case 230:
//#line 926 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "La sentencia de control IF ELSE debe terminar con ','.");}
break;
case 231:
//#line 927 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "La sentencia de control IF ELSE debe terminar con la palabra reservada END_IF y con finalizar con ','.");}
break;
case 232:
//#line 928 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "La sentencia de control IF ELSE debe terminar con ','.");}
break;
case 233:
//#line 929 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "La sentencia de control IF ELSE debe terminar con ','.");}
break;
case 234:
//#line 932 "grammar.y"
{tercetos.backPatching(1); tercetos.addUncondBranch(); tercetos.addLabel();}
break;
case 235:
//#line 933 "grammar.y"
{tercetos.backPatching(1); tercetos.addUncondBranch(); tercetos.addLabel();}
break;
case 239:
//#line 943 "grammar.y"
{
                          if (!(val_peek(4).sval.isEmpty() || val_peek(2).sval.isEmpty())){
                            tercetos.add("+", val_peek(4).sval, "-");
                            tercetos.backPatching();
                            tercetos.stack();
                            tercetos.add("=", val_peek(4).sval, yyval.sval);
                            tercetos.backPatching();
                            tercetos.addUncondBranch(false);
                            tercetos.backPatching(0); /*Agrego el salto del CB*/
                            tercetos.backPatching(); /*Agrego el salgo del UB*/
                            tercetos.addLabel();
                          } else
                            yyval = new ParserVal("");

                         }
break;
case 240:
//#line 960 "grammar.y"
{
                               if (!val_peek(0).sval.isEmpty()) {
                                yyval = new ParserVal(val_peek(0).sval);
                                tercetos.add("=", val_peek(0).sval, "-");
                                tercetos.stack(val_peek(0).sval);
                                tercetos.stack();
                               }
                         }
break;
case 241:
//#line 968 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Error en la signatura del FOR IN RANGE.");}
break;
case 242:
//#line 973 "grammar.y"
{
                      String msj = TablaTipos.checkTypeCondition(val_peek(5).sval, val_peek(3).sval, val_peek(1).sval);

                      if (!msj.isEmpty()) {
                        Logger.logError(aLexico.getProgramPosition(), msj);
                        yyval = new ParserVal("");
                      } else {
                        tercetos.backPatching(val_peek(5).sval);
                        String ref = tercetos.addLabel();
                        yyval = new ParserVal(tercetos.add(tercetos.getComparator(val_peek(1).sval), val_peek(3).sval, "-"));
                        tercetos.backPatching();
                        tercetos.stack(ref);
                        tercetos.addCondBranch(yyval.sval);
                        tercetos.stack("+" + val_peek(1).sval);
                      }
                  }
break;
case 243:
//#line 989 "grammar.y"
{yyval = new ParserVal(""); Logger.logError(aLexico.getProgramPosition(), "Las constantes de actualizacion deben estar separadas por ';'.");}
break;
case 244:
//#line 990 "grammar.y"
{yyval = new ParserVal(""); Logger.logError(aLexico.getProgramPosition(), "La condicion del FOR IN RANGE debe estar delimitada por parentesis '(...)'.");}
break;
case 250:
//#line 1006 "grammar.y"
{
                        if (!val_peek(1).sval.isEmpty())
                          scope.deleteLastScope();
                      }
break;
case 252:
//#line 1013 "grammar.y"
{yyval = new ParserVal(""); Logger.logError(aLexico.getProgramPosition(), "Es necesario definir el cuerpo de la funcion.");}
break;
case 253:
//#line 1016 "grammar.y"
{tercetos.add("PRINT", val_peek(1).sval, "[-]");}
break;
case 254:
//#line 1017 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Se esperaba una \',\' en el final de la sentencia.");}
break;
case 255:
//#line 1018 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Se esperaba una \',\' en el final de la sentencia.");}
break;
case 256:
//#line 1019 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Solo se permite imprimir variables del tipo CADENA.");}
break;
case 257:
//#line 1020 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Solo se permite imprimir variables del tipo CADENA.");}
break;
case 258:
//#line 1021 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Solo se permite imprimir variables del tipo CADENA.");}
break;
case 259:
//#line 1022 "grammar.y"
{tercetos.add("PRINT", "", "[-]");}
break;
case 260:
//#line 1023 "grammar.y"
{Logger.logError(aLexico.getProgramPosition(), "Se esperaba un % que cierre la cadena.");}
break;
//#line 2484 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
